// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetApiAbpApiDefinitionData, GetApiAbpApiDefinitionResponse, GetApiAbpApplicationConfigurationData, GetApiAbpApplicationConfigurationResponse, GetApiAbpApplicationLocalizationData, GetApiAbpApplicationLocalizationResponse, GetApiAbpMultiTenancyTenantsByNameByNameData, GetApiAbpMultiTenancyTenantsByNameByNameResponse, GetApiAbpMultiTenancyTenantsByIdByIdData, GetApiAbpMultiTenancyTenantsByIdByIdResponse, PostApiAccountRegisterData, PostApiAccountRegisterResponse, PostApiAccountSendPasswordResetCodeData, PostApiAccountSendPasswordResetCodeResponse, PostApiAccountVerifyPasswordResetTokenData, PostApiAccountVerifyPasswordResetTokenResponse, PostApiAccountResetPasswordData, PostApiAccountResetPasswordResponse, PostApiAppChargeableServiceChargeableServiceData, PostApiAppChargeableServiceChargeableServiceResponse, DeleteApiAppChargeableServiceByIdChargeableServiceData, DeleteApiAppChargeableServiceByIdChargeableServiceResponse, GetApiAppChargeableServiceByIdChargeableServiceData, GetApiAppChargeableServiceByIdChargeableServiceResponse, PutApiAppChargeableServiceByIdChargeableServiceData, PutApiAppChargeableServiceByIdChargeableServiceResponse, GetApiAppChargeableServiceChargeableServiceListResponse, GetApiAppDoctorByIdData, GetApiAppDoctorByIdResponse, PutApiAppDoctorByIdData, PutApiAppDoctorByIdResponse, GetApiAppDoctorByIdByUserIdData, GetApiAppDoctorByIdByUserIdResponse, GetApiAppDoctorDoctorForEditByDoctorIdData, GetApiAppDoctorDoctorForEditByDoctorIdResponse, GetApiAppDoctorResponse, PostApiAppDoctorData, PostApiAppDoctorResponse, GetApiAppDoctorDoctorListResponse, PostApiAppDoctorAssignPermissionsToDoctorByUserIdData, PostApiAppDoctorAssignPermissionsToDoctorByUserIdResponse, GetApiAppDoctorPermissionsResponse, PostApiAppDoctorByIdSetDoctorOnDutyData, PostApiAppDoctorByIdSetDoctorOnDutyResponse, PutApiAppDoctorByIdDoctorOnDutyData, PutApiAppDoctorByIdDoctorOnDutyResponse, GetApiAppDoctorDoctorOnDutyResponse, GetApiAppDocumentByIdDocumentByIdData, GetApiAppDocumentByIdDocumentByIdResponse, PostApiAppDocumentGeneratePdfFromDocumentByDocumentIdData, PostApiAppDocumentGeneratePdfFromDocumentByDocumentIdResponse, PostApiAppDocumentDocumentData, PostApiAppDocumentDocumentResponse, PutApiAppDocumentByIdDocumentData, PutApiAppDocumentByIdDocumentResponse, GetApiAppDocumentDocumentsByQueueIdByQueueIdData, GetApiAppDocumentDocumentsByQueueIdByQueueIdResponse, PostApiAppDocumentTemplateTemplateData, PostApiAppDocumentTemplateTemplateResponse, DeleteApiAppDocumentTemplateByIdTemplateByIdData, DeleteApiAppDocumentTemplateByIdTemplateByIdResponse, GetApiAppDocumentTemplateByIdTemplateByIdData, GetApiAppDocumentTemplateByIdTemplateByIdResponse, PutApiAppDocumentTemplateByIdTemplateData, PutApiAppDocumentTemplateByIdTemplateResponse, PostApiAccountDynamicClaimsRefreshResponse, GetApiSettingManagementEmailingResponse, PostApiSettingManagementEmailingData, PostApiSettingManagementEmailingResponse, PostApiSettingManagementEmailingSendTestEmailData, PostApiSettingManagementEmailingSendTestEmailResponse, PostApiAppExternalBlobSaveBlobData, PostApiAppExternalBlobSaveBlobResponse, PostApiAppExternalBlobByIdDownloadBlobData, PostApiAppExternalBlobByIdDownloadBlobResponse, DeleteApiAppExternalBlobByIdBlobData, DeleteApiAppExternalBlobByIdBlobResponse, GetApiFeatureManagementFeaturesData, GetApiFeatureManagementFeaturesResponse, PutApiFeatureManagementFeaturesData, PutApiFeatureManagementFeaturesResponse, DeleteApiFeatureManagementFeaturesData, DeleteApiFeatureManagementFeaturesResponse, PostApiAppFieldTemplateFieldTemplateData, PostApiAppFieldTemplateFieldTemplateResponse, DeleteApiAppFieldTemplateByIdFieldTemplateData, DeleteApiAppFieldTemplateByIdFieldTemplateResponse, GetApiAppFieldTemplateByIdFieldTemplateData, GetApiAppFieldTemplateByIdFieldTemplateResponse, PutApiAppFieldTemplateByIdFieldTemplateData, PutApiAppFieldTemplateByIdFieldTemplateResponse, GetApiAppFieldTemplateFieldTemplatesResponse, PostApiAppInsurancePanelData, PostApiAppInsurancePanelResponse, GetApiAppInsurancePanelResponse, DeleteApiAppInsurancePanelByIdData, DeleteApiAppInsurancePanelByIdResponse, GetApiAppInsurancePanelByIdData, GetApiAppInsurancePanelByIdResponse, PutApiAppInsurancePanelByIdData, PutApiAppInsurancePanelByIdResponse, GetApiAppInsurancePanelInsurancePanelListResponse, PostApiAppInvoiceInvoiceData, PostApiAppInvoiceInvoiceResponse, GetApiAppInvoiceByIdInvoiceData, GetApiAppInvoiceByIdInvoiceResponse, PutApiAppInvoiceByIdInvoiceData, PutApiAppInvoiceByIdInvoiceResponse, GetApiAppInvoiceInvoiceByNumberData, GetApiAppInvoiceInvoiceByNumberResponse, GetApiAppInvoiceInvoiceListData, GetApiAppInvoiceInvoiceListResponse, GetApiAppInvoicePendingInvoicesResponse, PutApiAppInvoiceByIdPanelClaimInvoiceData, PutApiAppInvoiceByIdPanelClaimInvoiceResponse, PostApiAppInvoiceByIdVoidInvoiceData, PostApiAppInvoiceByIdVoidInvoiceResponse, GetApiAppInvoiceInvoicesByPatientIdByPatientIdData, GetApiAppInvoiceInvoicesByPatientIdByPatientIdResponse, GetApiAppInvoicePanelInvoiceListData, GetApiAppInvoicePanelInvoiceListResponse, PostApiAccountLoginData, PostApiAccountLoginResponse, GetApiAccountLogoutResponse, PostApiAccountCheckPasswordData, PostApiAccountCheckPasswordResponse, PostApiAppMedicalConsentFormData, PostApiAppMedicalConsentFormResponse, DeleteApiAppMedicalConsentFormByIdData, DeleteApiAppMedicalConsentFormByIdResponse, GetApiAppMedicalConsentFormByIdData, GetApiAppMedicalConsentFormByIdResponse, PutApiAppMedicalConsentFormByIdData, PutApiAppMedicalConsentFormByIdResponse, GetApiAppMedicalConsentFormByIdByPatientIdData, GetApiAppMedicalConsentFormByIdByPatientIdResponse, PostApiAppMedicalHistoryUpdateMedicalHistoryData, PostApiAppMedicalHistoryUpdateMedicalHistoryResponse, DeleteApiAppMedicalHistoryByIdMedicalHistoryData, DeleteApiAppMedicalHistoryByIdMedicalHistoryResponse, GetApiAppMedicalHistoryByIdMedicalHistoryData, GetApiAppMedicalHistoryByIdMedicalHistoryResponse, PutApiAppMedicalHistoryByIdMedicalHistoryData, PutApiAppMedicalHistoryByIdMedicalHistoryResponse, GetApiAppMedicalHistoryMedicalHistoryByQueueIdByQueueIdData, GetApiAppMedicalHistoryMedicalHistoryByQueueIdByQueueIdResponse, GetApiAppMedicalHistoryMedicalHistoryListByQueueIdsData, GetApiAppMedicalHistoryMedicalHistoryListByQueueIdsResponse, GetApiAppMedicalHistoryMedicalHistoryListByPatientIdData, GetApiAppMedicalHistoryMedicalHistoryListByPatientIdResponse, GetApiAppMedicalHistoryMedicalHistoryTabItemsByPatientIdData, GetApiAppMedicalHistoryMedicalHistoryTabItemsByPatientIdResponse, PostApiAppMedicalSupplyMedicalSupplyData, PostApiAppMedicalSupplyMedicalSupplyResponse, DeleteApiAppMedicalSupplyByIdMedicalSupplyData, DeleteApiAppMedicalSupplyByIdMedicalSupplyResponse, GetApiAppMedicalSupplyByIdMedicalSupplyData, GetApiAppMedicalSupplyByIdMedicalSupplyResponse, PutApiAppMedicalSupplyByIdMedicalSupplyData, PutApiAppMedicalSupplyByIdMedicalSupplyResponse, GetApiAppMedicalSupplyMedicalSupplyListResponse, PostApiAppMedicineMedicineData, PostApiAppMedicineMedicineResponse, DeleteApiAppMedicineByIdMedicineData, DeleteApiAppMedicineByIdMedicineResponse, GetApiAppMedicineByIdMedicineData, GetApiAppMedicineByIdMedicineResponse, PutApiAppMedicineByIdMedicineData, PutApiAppMedicineByIdMedicineResponse, GetApiAppMedicineMedicineListResponse, GetApiAppPatientByIdPatientData, GetApiAppPatientByIdPatientResponse, DeleteApiAppPatientByIdPatientData, DeleteApiAppPatientByIdPatientResponse, PutApiAppPatientByIdPatientData, PutApiAppPatientByIdPatientResponse, PostApiAppPatientPatientData, PostApiAppPatientPatientResponse, GetApiAppPatientPatientsByNameOrNationalIdData, GetApiAppPatientPatientsByNameOrNationalIdResponse, GetApiAppPatientPatientsResponse, GetApiAppPatientPatientListData, GetApiAppPatientPatientListResponse, PostApiAppPatientQueueEnqueuePatientData, PostApiAppPatientQueueEnqueuePatientResponse, PostApiAppPatientQueueByIdCompleteQueueData, PostApiAppPatientQueueByIdCompleteQueueResponse, PostApiAppPatientQueueByIdCancelQueueData, PostApiAppPatientQueueByIdCancelQueueResponse, GetApiAppPatientQueueLatestQueueNumberResponse, GetApiAppPatientQueuePatientQueuesData, GetApiAppPatientQueuePatientQueuesResponse, PostApiAppPatientQueueByIdPrioritizeQueueData, PostApiAppPatientQueueByIdPrioritizeQueueResponse, PutApiAppPatientQueueByIdQueueStatusByDoctorIdData, PutApiAppPatientQueueByIdQueueStatusByDoctorIdResponse, PutApiAppPatientQueueQueueData, PutApiAppPatientQueueQueueResponse, GetApiAppPatientQueueByIdPatientQueueByIdForClerkData, GetApiAppPatientQueueByIdPatientQueueByIdForClerkResponse, PostApiAppPatientQueueGenerateMcPdfData, PostApiAppPatientQueueGenerateMcPdfResponse, GetApiAppPatientQueueByIdLatestQueueData, GetApiAppPatientQueueByIdLatestQueueResponse, GetApiAppPatientQueueLatestQueueForAllPatientsResponse, GetApiAppPatientQueueQueuesForPatientByPatientIdData, GetApiAppPatientQueueQueuesForPatientByPatientIdResponse, PostApiAppPatientSessionEndPatientSessionBySessionIdData, PostApiAppPatientSessionEndPatientSessionBySessionIdResponse, GetApiAppPatientSessionPatientSessionByPatientIdData, GetApiAppPatientSessionPatientSessionByPatientIdResponse, GetApiAppPatientSessionQueueEntriesBySessionIdData, GetApiAppPatientSessionQueueEntriesBySessionIdResponse, GetApiAppPatientSessionLatestPatientSessionByPatientIdData, GetApiAppPatientSessionLatestPatientSessionByPatientIdResponse, PostApiAppPaymentPaymentData, PostApiAppPaymentPaymentResponse, PostApiAppPaymentPaymentsData, PostApiAppPaymentPaymentsResponse, DeleteApiAppPaymentPaymentsData, DeleteApiAppPaymentPaymentsResponse, GetApiAppPaymentPaymentsResponse, DeleteApiAppPaymentByIdPaymentData, DeleteApiAppPaymentByIdPaymentResponse, GetApiAppPaymentByIdPaymentData, GetApiAppPaymentByIdPaymentResponse, PutApiAppPaymentByIdPaymentData, PutApiAppPaymentByIdPaymentResponse, GetApiAppPaymentPaymentsByInvoiceIdByInvoiceIdData, GetApiAppPaymentPaymentsByInvoiceIdByInvoiceIdResponse, GetApiAppPaymentPaymentsByPatientIdByPatientIdData, GetApiAppPaymentPaymentsByPatientIdByPatientIdResponse, GetApiPermissionManagementPermissionsData, GetApiPermissionManagementPermissionsResponse, PutApiPermissionManagementPermissionsData, PutApiPermissionManagementPermissionsResponse, PostApiAppPrescriptionPrescriptionData, PostApiAppPrescriptionPrescriptionResponse, PostApiAppPrescriptionPrescriptionsData, PostApiAppPrescriptionPrescriptionsResponse, DeleteApiAppPrescriptionPrescriptionsData, DeleteApiAppPrescriptionPrescriptionsResponse, GetApiAppPrescriptionPrescriptionsResponse, DeleteApiAppPrescriptionByIdPrescriptionData, DeleteApiAppPrescriptionByIdPrescriptionResponse, GetApiAppPrescriptionByIdPrescriptionData, GetApiAppPrescriptionByIdPrescriptionResponse, PutApiAppPrescriptionByIdPrescriptionData, PutApiAppPrescriptionByIdPrescriptionResponse, GetApiAppPrescriptionPrescriptionsByMedicalHistoryIdsData, GetApiAppPrescriptionPrescriptionsByMedicalHistoryIdsResponse, GetApiAppPrescriptionPrescriptionsByPatientIdByPatientIdData, GetApiAppPrescriptionPrescriptionsByPatientIdByPatientIdResponse, GetApiAppPrescriptionMedicalHistoryPrescriptionItemsByPrescriptionIdByPrescriptionIdData, GetApiAppPrescriptionMedicalHistoryPrescriptionItemsByPrescriptionIdByPrescriptionIdResponse, GetApiAccountMyProfileResponse, PutApiAccountMyProfileData, PutApiAccountMyProfileResponse, PostApiAccountMyProfileChangePasswordData, PostApiAccountMyProfileChangePasswordResponse, GetApiAppReportArAgingReportExcelResponse, GetApiAppReportArAgingReportResponse, GetApiAppReportDailyReportData, GetApiAppReportDailyReportResponse, GetApiAppReportDailyReportExcelData, GetApiAppReportDailyReportExcelResponse, GetApiIdentityRolesAllResponse, GetApiIdentityRolesData, GetApiIdentityRolesResponse, PostApiIdentityRolesData, PostApiIdentityRolesResponse, GetApiIdentityRolesByIdData, GetApiIdentityRolesByIdResponse, PutApiIdentityRolesByIdData, PutApiIdentityRolesByIdResponse, DeleteApiIdentityRolesByIdData, DeleteApiIdentityRolesByIdResponse, PostApiAppServiceProviderData, PostApiAppServiceProviderResponse, GetApiAppServiceProviderResponse, DeleteApiAppServiceProviderByIdData, DeleteApiAppServiceProviderByIdResponse, GetApiAppServiceProviderByIdData, GetApiAppServiceProviderByIdResponse, PutApiAppServiceProviderByIdData, PutApiAppServiceProviderByIdResponse, GetApiAppServiceProviderServiceProviderForEditByTenantIdByTenantIdData, GetApiAppServiceProviderServiceProviderForEditByTenantIdByTenantIdResponse, PostApiAppServiceProviderByIdNewUpdateData, PostApiAppServiceProviderByIdNewUpdateResponse, GetApiAppServiceProviderNewShortIdData, GetApiAppServiceProviderNewShortIdResponse, GetApiAppServiceProviderByTypeData, GetApiAppServiceProviderByTypeResponse, PostApiAppServiceProviderByIdResetPasswordData, PostApiAppServiceProviderByIdResetPasswordResponse, GetApiAppStaffPermissionsResponse, PostApiAppStaffAssignPermissionsToStaffByUserIdData, PostApiAppStaffAssignPermissionsToStaffByUserIdResponse, PostApiAppStaffStaffData, PostApiAppStaffStaffResponse, GetApiAppStaffStaffResponse, PutApiAppStaffStaffByStaffIdData, PutApiAppStaffStaffByStaffIdResponse, GetApiAppStaffStaffForEditByStaffIdData, GetApiAppStaffStaffForEditByStaffIdResponse, GetApiAppStaffStaffListResponse, GetApiMultiTenancyTenantsByIdData, GetApiMultiTenancyTenantsByIdResponse, PutApiMultiTenancyTenantsByIdData, PutApiMultiTenancyTenantsByIdResponse, DeleteApiMultiTenancyTenantsByIdData, DeleteApiMultiTenancyTenantsByIdResponse, GetApiMultiTenancyTenantsData, GetApiMultiTenancyTenantsResponse, PostApiMultiTenancyTenantsData, PostApiMultiTenancyTenantsResponse, GetApiMultiTenancyTenantsByIdDefaultConnectionStringData, GetApiMultiTenancyTenantsByIdDefaultConnectionStringResponse, PutApiMultiTenancyTenantsByIdDefaultConnectionStringData, PutApiMultiTenancyTenantsByIdDefaultConnectionStringResponse, DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringData, DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringResponse, GetApiSettingManagementTimezoneResponse, PostApiSettingManagementTimezoneData, PostApiSettingManagementTimezoneResponse, GetApiSettingManagementTimezoneTimezonesResponse, GetApiIdentityUsersByIdData, GetApiIdentityUsersByIdResponse, PutApiIdentityUsersByIdData, PutApiIdentityUsersByIdResponse, DeleteApiIdentityUsersByIdData, DeleteApiIdentityUsersByIdResponse, GetApiIdentityUsersData, GetApiIdentityUsersResponse, PostApiIdentityUsersData, PostApiIdentityUsersResponse, GetApiIdentityUsersByIdRolesData, GetApiIdentityUsersByIdRolesResponse, PutApiIdentityUsersByIdRolesData, PutApiIdentityUsersByIdRolesResponse, GetApiIdentityUsersAssignableRolesResponse, GetApiIdentityUsersByUsernameByUserNameData, GetApiIdentityUsersByUsernameByUserNameResponse, GetApiIdentityUsersByEmailByEmailData, GetApiIdentityUsersByEmailByEmailResponse, GetApiIdentityUsersLookupByIdData, GetApiIdentityUsersLookupByIdResponse, GetApiIdentityUsersLookupByUsernameByUserNameData, GetApiIdentityUsersLookupByUsernameByUserNameResponse, GetApiIdentityUsersLookupSearchData, GetApiIdentityUsersLookupSearchResponse, GetApiIdentityUsersLookupCountData, GetApiIdentityUsersLookupCountResponse, PostApiAppVisitTemplateVisitTemplateData, PostApiAppVisitTemplateVisitTemplateResponse, DeleteApiAppVisitTemplateByIdVisitTemplateData, DeleteApiAppVisitTemplateByIdVisitTemplateResponse, GetApiAppVisitTemplateByIdVisitTemplateData, GetApiAppVisitTemplateByIdVisitTemplateResponse, PutApiAppVisitTemplateByIdVisitTemplateData, PutApiAppVisitTemplateByIdVisitTemplateResponse, GetApiAppVisitTemplateVisitTemplatesResponse } from './types.gen';

/**
 * @param data The data for the request.
 * @param data.includeTypes
 * @returns Volo_Abp_Http_Modeling_ApplicationApiDescriptionModel Success
 * @throws ApiError
 */
export const getApiAbpApiDefinition = (data: GetApiAbpApiDefinitionData = {}): CancelablePromise<GetApiAbpApiDefinitionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/api-definition',
    query: {
        IncludeTypes: data.includeTypes
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.includeLocalizationResources
 * @returns Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationConfigurationDto Success
 * @throws ApiError
 */
export const getApiAbpApplicationConfiguration = (data: GetApiAbpApplicationConfigurationData = {}): CancelablePromise<GetApiAbpApplicationConfigurationResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/application-configuration',
    query: {
        IncludeLocalizationResources: data.includeLocalizationResources
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.cultureName
 * @param data.onlyDynamics
 * @returns Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationDto Success
 * @throws ApiError
 */
export const getApiAbpApplicationLocalization = (data: GetApiAbpApplicationLocalizationData): CancelablePromise<GetApiAbpApplicationLocalizationResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/application-localization',
    query: {
        CultureName: data.cultureName,
        OnlyDynamics: data.onlyDynamics
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.name
 * @returns Volo_Abp_AspNetCore_Mvc_MultiTenancy_FindTenantResultDto Success
 * @throws ApiError
 */
export const getApiAbpMultiTenancyTenantsByNameByName = (data: GetApiAbpMultiTenancyTenantsByNameByNameData): CancelablePromise<GetApiAbpMultiTenancyTenantsByNameByNameResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/multi-tenancy/tenants/by-name/{name}',
    path: {
        name: data.name
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Volo_Abp_AspNetCore_Mvc_MultiTenancy_FindTenantResultDto Success
 * @throws ApiError
 */
export const getApiAbpMultiTenancyTenantsByIdById = (data: GetApiAbpMultiTenancyTenantsByIdByIdData): CancelablePromise<GetApiAbpMultiTenancyTenantsByIdByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/abp/multi-tenancy/tenants/by-id/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Volo_Abp_Identity_IdentityUserDto Success
 * @throws ApiError
 */
export const postApiAccountRegister = (data: PostApiAccountRegisterData = {}): CancelablePromise<PostApiAccountRegisterResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/register',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAccountSendPasswordResetCode = (data: PostApiAccountSendPasswordResetCodeData = {}): CancelablePromise<PostApiAccountSendPasswordResetCodeResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/send-password-reset-code',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns boolean Success
 * @throws ApiError
 */
export const postApiAccountVerifyPasswordResetToken = (data: PostApiAccountVerifyPasswordResetTokenData = {}): CancelablePromise<PostApiAccountVerifyPasswordResetTokenResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/verify-password-reset-token',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAccountResetPassword = (data: PostApiAccountResetPasswordData = {}): CancelablePromise<PostApiAccountResetPasswordResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/reset-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_ChargeableServices_ChargeableServiceDto Success
 * @throws ApiError
 */
export const postApiAppChargeableServiceChargeableService = (data: PostApiAppChargeableServiceChargeableServiceData = {}): CancelablePromise<PostApiAppChargeableServiceChargeableServiceResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/chargeable-service/chargeable-service',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppChargeableServiceByIdChargeableService = (data: DeleteApiAppChargeableServiceByIdChargeableServiceData): CancelablePromise<DeleteApiAppChargeableServiceByIdChargeableServiceResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/chargeable-service/{id}/chargeable-service',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_ChargeableServices_ChargeableServiceDto Success
 * @throws ApiError
 */
export const getApiAppChargeableServiceByIdChargeableService = (data: GetApiAppChargeableServiceByIdChargeableServiceData): CancelablePromise<GetApiAppChargeableServiceByIdChargeableServiceResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/chargeable-service/{id}/chargeable-service',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_ChargeableServices_ChargeableServiceDto Success
 * @throws ApiError
 */
export const putApiAppChargeableServiceByIdChargeableService = (data: PutApiAppChargeableServiceByIdChargeableServiceData): CancelablePromise<PutApiAppChargeableServiceByIdChargeableServiceResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/chargeable-service/{id}/chargeable-service',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Mediflow_DTOs_ChargeableServices_ChargeableServiceDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiAppChargeableServiceChargeableServiceList = (): CancelablePromise<GetApiAppChargeableServiceChargeableServiceListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/chargeable-service/chargeable-service-list',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Doctors_DoctorDto Success
 * @throws ApiError
 */
export const getApiAppDoctorById = (data: GetApiAppDoctorByIdData): CancelablePromise<GetApiAppDoctorByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/doctor/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Doctors_DoctorDto Success
 * @throws ApiError
 */
export const putApiAppDoctorById = (data: PutApiAppDoctorByIdData): CancelablePromise<PutApiAppDoctorByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/doctor/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Doctors_DoctorDto Success
 * @throws ApiError
 */
export const getApiAppDoctorByIdByUserId = (data: GetApiAppDoctorByIdByUserIdData): CancelablePromise<GetApiAppDoctorByIdByUserIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/doctor/{id}/by-user-id',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.doctorId
 * @returns Mediflow_DTOs_Doctors_CreateUpdateDoctorDto Success
 * @throws ApiError
 */
export const getApiAppDoctorDoctorForEditByDoctorId = (data: GetApiAppDoctorDoctorForEditByDoctorIdData): CancelablePromise<GetApiAppDoctorDoctorForEditByDoctorIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/doctor/doctor-for-edit/{doctorId}',
    path: {
        doctorId: data.doctorId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Doctors_DoctorDto Success
 * @throws ApiError
 */
export const getApiAppDoctor = (): CancelablePromise<GetApiAppDoctorResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/doctor',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Doctors_DoctorDto Success
 * @throws ApiError
 */
export const postApiAppDoctor = (data: PostApiAppDoctorData = {}): CancelablePromise<PostApiAppDoctorResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/doctor',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Doctors_DoctorListItemDto Success
 * @throws ApiError
 */
export const getApiAppDoctorDoctorList = (): CancelablePromise<GetApiAppDoctorDoctorListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/doctor/doctor-list',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppDoctorAssignPermissionsToDoctorByUserId = (data: PostApiAppDoctorAssignPermissionsToDoctorByUserIdData): CancelablePromise<PostApiAppDoctorAssignPermissionsToDoctorByUserIdResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/doctor/assign-permissions-to-doctor/{userId}',
    path: {
        userId: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Doctors_PermissionTreeNodeDto Success
 * @throws ApiError
 */
export const getApiAppDoctorPermissions = (): CancelablePromise<GetApiAppDoctorPermissionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/doctor/permissions',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.isOnDuty
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppDoctorByIdSetDoctorOnDuty = (data: PostApiAppDoctorByIdSetDoctorOnDutyData): CancelablePromise<PostApiAppDoctorByIdSetDoctorOnDutyResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/doctor/{id}/set-doctor-on-duty',
    path: {
        id: data.id
    },
    query: {
        isOnDuty: data.isOnDuty
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiAppDoctorByIdDoctorOnDuty = (data: PutApiAppDoctorByIdDoctorOnDutyData): CancelablePromise<PutApiAppDoctorByIdDoctorOnDutyResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/doctor/{id}/doctor-on-duty',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Doctors_DoctorDto Success
 * @throws ApiError
 */
export const getApiAppDoctorDoctorOnDuty = (): CancelablePromise<GetApiAppDoctorDoctorOnDutyResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/doctor/doctor-on-duty',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Documents_DocumentDto Success
 * @throws ApiError
 */
export const getApiAppDocumentByIdDocumentById = (data: GetApiAppDocumentByIdDocumentByIdData): CancelablePromise<GetApiAppDocumentByIdDocumentByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/document/{id}/document-by-id',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.documentId
 * @returns string Success
 * @throws ApiError
 */
export const postApiAppDocumentGeneratePdfFromDocumentByDocumentId = (data: PostApiAppDocumentGeneratePdfFromDocumentByDocumentIdData): CancelablePromise<PostApiAppDocumentGeneratePdfFromDocumentByDocumentIdResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/document/generate-pdf-from-document/{documentId}',
    path: {
        documentId: data.documentId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Documents_DocumentDto Success
 * @throws ApiError
 */
export const postApiAppDocumentDocument = (data: PostApiAppDocumentDocumentData = {}): CancelablePromise<PostApiAppDocumentDocumentResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/document/document',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Documents_DocumentDto Success
 * @throws ApiError
 */
export const putApiAppDocumentByIdDocument = (data: PutApiAppDocumentByIdDocumentData): CancelablePromise<PutApiAppDocumentByIdDocumentResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/document/{id}/document',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.queueId
 * @returns Mediflow_DTOs_Documents_DocumentDto Success
 * @throws ApiError
 */
export const getApiAppDocumentDocumentsByQueueIdByQueueId = (data: GetApiAppDocumentDocumentsByQueueIdByQueueIdData): CancelablePromise<GetApiAppDocumentDocumentsByQueueIdByQueueIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/document/documents-by-queue-id/{queueId}',
    path: {
        queueId: data.queueId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_DocumentTemplates_DocumentTemplateDto Success
 * @throws ApiError
 */
export const postApiAppDocumentTemplateTemplate = (data: PostApiAppDocumentTemplateTemplateData = {}): CancelablePromise<PostApiAppDocumentTemplateTemplateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/document-template/template',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppDocumentTemplateByIdTemplateById = (data: DeleteApiAppDocumentTemplateByIdTemplateByIdData): CancelablePromise<DeleteApiAppDocumentTemplateByIdTemplateByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/document-template/{id}/template-by-id',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_DocumentTemplates_DocumentTemplateDto Success
 * @throws ApiError
 */
export const getApiAppDocumentTemplateByIdTemplateById = (data: GetApiAppDocumentTemplateByIdTemplateByIdData): CancelablePromise<GetApiAppDocumentTemplateByIdTemplateByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/document-template/{id}/template-by-id',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_DocumentTemplates_DocumentTemplateDto Success
 * @throws ApiError
 */
export const putApiAppDocumentTemplateByIdTemplate = (data: PutApiAppDocumentTemplateByIdTemplateData): CancelablePromise<PutApiAppDocumentTemplateByIdTemplateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/document-template/{id}/template',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAccountDynamicClaimsRefresh = (): CancelablePromise<PostApiAccountDynamicClaimsRefreshResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/dynamic-claims/refresh',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_SettingManagement_EmailSettingsDto Success
 * @throws ApiError
 */
export const getApiSettingManagementEmailing = (): CancelablePromise<GetApiSettingManagementEmailingResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/setting-management/emailing',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiSettingManagementEmailing = (data: PostApiSettingManagementEmailingData = {}): CancelablePromise<PostApiSettingManagementEmailingResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/setting-management/emailing',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiSettingManagementEmailingSendTestEmail = (data: PostApiSettingManagementEmailingSendTestEmailData = {}): CancelablePromise<PostApiSettingManagementEmailingSendTestEmailResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/setting-management/emailing/send-test-email',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.formData
 * @returns Mediflow_DTOs_ExternalBlobs_ExternalBlobDto Success
 * @throws ApiError
 */
export const postApiAppExternalBlobSaveBlob = (data: PostApiAppExternalBlobSaveBlobData = {}): CancelablePromise<PostApiAppExternalBlobSaveBlobResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/external-blob/save-blob',
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns binary Success
 * @throws ApiError
 */
export const postApiAppExternalBlobByIdDownloadBlob = (data: PostApiAppExternalBlobByIdDownloadBlobData): CancelablePromise<PostApiAppExternalBlobByIdDownloadBlobResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/external-blob/{id}/download-blob',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppExternalBlobByIdBlob = (data: DeleteApiAppExternalBlobByIdBlobData): CancelablePromise<DeleteApiAppExternalBlobByIdBlobResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/external-blob/{id}/blob',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @returns Volo_Abp_FeatureManagement_GetFeatureListResultDto Success
 * @throws ApiError
 */
export const getApiFeatureManagementFeatures = (data: GetApiFeatureManagementFeaturesData = {}): CancelablePromise<GetApiFeatureManagementFeaturesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/feature-management/features',
    query: {
        providerName: data.providerName,
        providerKey: data.providerKey
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiFeatureManagementFeatures = (data: PutApiFeatureManagementFeaturesData = {}): CancelablePromise<PutApiFeatureManagementFeaturesResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/feature-management/features',
    query: {
        providerName: data.providerName,
        providerKey: data.providerKey
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiFeatureManagementFeatures = (data: DeleteApiFeatureManagementFeaturesData = {}): CancelablePromise<DeleteApiFeatureManagementFeaturesResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/feature-management/features',
    query: {
        providerName: data.providerName,
        providerKey: data.providerKey
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_FieldTemplates_FieldTemplateDto Success
 * @throws ApiError
 */
export const postApiAppFieldTemplateFieldTemplate = (data: PostApiAppFieldTemplateFieldTemplateData = {}): CancelablePromise<PostApiAppFieldTemplateFieldTemplateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/field-template/field-template',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppFieldTemplateByIdFieldTemplate = (data: DeleteApiAppFieldTemplateByIdFieldTemplateData): CancelablePromise<DeleteApiAppFieldTemplateByIdFieldTemplateResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/field-template/{id}/field-template',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_FieldTemplates_FieldTemplateDto Success
 * @throws ApiError
 */
export const getApiAppFieldTemplateByIdFieldTemplate = (data: GetApiAppFieldTemplateByIdFieldTemplateData): CancelablePromise<GetApiAppFieldTemplateByIdFieldTemplateResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/field-template/{id}/field-template',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_FieldTemplates_FieldTemplateDto Success
 * @throws ApiError
 */
export const putApiAppFieldTemplateByIdFieldTemplate = (data: PutApiAppFieldTemplateByIdFieldTemplateData): CancelablePromise<PutApiAppFieldTemplateByIdFieldTemplateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/field-template/{id}/field-template',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_FieldTemplates_FieldTemplateDto Success
 * @throws ApiError
 */
export const getApiAppFieldTemplateFieldTemplates = (): CancelablePromise<GetApiAppFieldTemplateFieldTemplatesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/field-template/field-templates',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_InsurancePanels_InsurancePanelDto Success
 * @throws ApiError
 */
export const postApiAppInsurancePanel = (data: PostApiAppInsurancePanelData = {}): CancelablePromise<PostApiAppInsurancePanelResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/insurance-panel',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_InsurancePanels_InsurancePanelDto Success
 * @throws ApiError
 */
export const getApiAppInsurancePanel = (): CancelablePromise<GetApiAppInsurancePanelResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/insurance-panel',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppInsurancePanelById = (data: DeleteApiAppInsurancePanelByIdData): CancelablePromise<DeleteApiAppInsurancePanelByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/insurance-panel/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_InsurancePanels_InsurancePanelDto Success
 * @throws ApiError
 */
export const getApiAppInsurancePanelById = (data: GetApiAppInsurancePanelByIdData): CancelablePromise<GetApiAppInsurancePanelByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/insurance-panel/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_InsurancePanels_InsurancePanelDto Success
 * @throws ApiError
 */
export const putApiAppInsurancePanelById = (data: PutApiAppInsurancePanelByIdData): CancelablePromise<PutApiAppInsurancePanelByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/insurance-panel/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Mediflow_DTOs_InsurancePanels_InsurancePanelDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiAppInsurancePanelInsurancePanelList = (): CancelablePromise<GetApiAppInsurancePanelInsurancePanelListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/insurance-panel/insurance-panel-list',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const postApiAppInvoiceInvoice = (data: PostApiAppInvoiceInvoiceData = {}): CancelablePromise<PostApiAppInvoiceInvoiceResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/invoice/invoice',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const getApiAppInvoiceByIdInvoice = (data: GetApiAppInvoiceByIdInvoiceData): CancelablePromise<GetApiAppInvoiceByIdInvoiceResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/invoice/{id}/invoice',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const putApiAppInvoiceByIdInvoice = (data: PutApiAppInvoiceByIdInvoiceData): CancelablePromise<PutApiAppInvoiceByIdInvoiceResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/invoice/{id}/invoice',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.number
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const getApiAppInvoiceInvoiceByNumber = (data: GetApiAppInvoiceInvoiceByNumberData = {}): CancelablePromise<GetApiAppInvoiceInvoiceByNumberResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/invoice/invoice-by-number',
    query: {
        number: data.number
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.skipCount
 * @param data.maxResultCount
 * @param data.sortField
 * @param data.sortDirection
 * @param data.searchTerm
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Mediflow_DTOs_Invoices_InvoiceDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiAppInvoiceInvoiceList = (data: GetApiAppInvoiceInvoiceListData = {}): CancelablePromise<GetApiAppInvoiceInvoiceListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/invoice/invoice-list',
    query: {
        skipCount: data.skipCount,
        maxResultCount: data.maxResultCount,
        sortField: data.sortField,
        sortDirection: data.sortDirection,
        searchTerm: data.searchTerm
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const getApiAppInvoicePendingInvoices = (): CancelablePromise<GetApiAppInvoicePendingInvoicesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/invoice/pending-invoices',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const putApiAppInvoiceByIdPanelClaimInvoice = (data: PutApiAppInvoiceByIdPanelClaimInvoiceData): CancelablePromise<PutApiAppInvoiceByIdPanelClaimInvoiceResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/invoice/{id}/panel-claim-invoice',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const postApiAppInvoiceByIdVoidInvoice = (data: PostApiAppInvoiceByIdVoidInvoiceData): CancelablePromise<PostApiAppInvoiceByIdVoidInvoiceResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/invoice/{id}/void-invoice',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @returns Mediflow_DTOs_Invoices_InvoiceDto Success
 * @throws ApiError
 */
export const getApiAppInvoiceInvoicesByPatientIdByPatientId = (data: GetApiAppInvoiceInvoicesByPatientIdByPatientIdData): CancelablePromise<GetApiAppInvoiceInvoicesByPatientIdByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/invoice/invoices-by-patient-id/{patientId}',
    path: {
        patientId: data.patientId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.skipCount
 * @param data.maxResultCount
 * @param data.sortField
 * @param data.sortDirection
 * @param data.searchTerm
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Mediflow_DTOs_Invoices_InvoiceDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiAppInvoicePanelInvoiceList = (data: GetApiAppInvoicePanelInvoiceListData = {}): CancelablePromise<GetApiAppInvoicePanelInvoiceListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/invoice/panel-invoice-list',
    query: {
        skipCount: data.skipCount,
        maxResultCount: data.maxResultCount,
        sortField: data.sortField,
        sortDirection: data.sortDirection,
        searchTerm: data.searchTerm
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Volo_Abp_Account_Web_Areas_Account_Controllers_Models_AbpLoginResult Success
 * @throws ApiError
 */
export const postApiAccountLogin = (data: PostApiAccountLoginData = {}): CancelablePromise<PostApiAccountLoginResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/login',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns unknown Success
 * @throws ApiError
 */
export const getApiAccountLogout = (): CancelablePromise<GetApiAccountLogoutResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/account/logout',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Volo_Abp_Account_Web_Areas_Account_Controllers_Models_AbpLoginResult Success
 * @throws ApiError
 */
export const postApiAccountCheckPassword = (data: PostApiAccountCheckPasswordData = {}): CancelablePromise<PostApiAccountCheckPasswordResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/check-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_Entities_MedicalConsentForms_MedicalConsentForm Success
 * @throws ApiError
 */
export const postApiAppMedicalConsentForm = (data: PostApiAppMedicalConsentFormData = {}): CancelablePromise<PostApiAppMedicalConsentFormResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/medical-consent-form',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppMedicalConsentFormById = (data: DeleteApiAppMedicalConsentFormByIdData): CancelablePromise<DeleteApiAppMedicalConsentFormByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/medical-consent-form/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_MedicalConsentForms_MedicalConsentFormDto Success
 * @throws ApiError
 */
export const getApiAppMedicalConsentFormById = (data: GetApiAppMedicalConsentFormByIdData): CancelablePromise<GetApiAppMedicalConsentFormByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-consent-form/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiAppMedicalConsentFormById = (data: PutApiAppMedicalConsentFormByIdData): CancelablePromise<PutApiAppMedicalConsentFormByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/medical-consent-form/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_MedicalConsentForms_MedicalConsentFormDto Success
 * @throws ApiError
 */
export const getApiAppMedicalConsentFormByIdByPatientId = (data: GetApiAppMedicalConsentFormByIdByPatientIdData): CancelablePromise<GetApiAppMedicalConsentFormByIdByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-consent-form/{id}/by-patient-id',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_MedicalHistory_MedicalHistoryDto Success
 * @throws ApiError
 */
export const postApiAppMedicalHistoryUpdateMedicalHistory = (data: PostApiAppMedicalHistoryUpdateMedicalHistoryData = {}): CancelablePromise<PostApiAppMedicalHistoryUpdateMedicalHistoryResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/medical-history/update-medical-history',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppMedicalHistoryByIdMedicalHistory = (data: DeleteApiAppMedicalHistoryByIdMedicalHistoryData): CancelablePromise<DeleteApiAppMedicalHistoryByIdMedicalHistoryResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/medical-history/{id}/medical-history',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_MedicalHistory_MedicalHistoryDto Success
 * @throws ApiError
 */
export const getApiAppMedicalHistoryByIdMedicalHistory = (data: GetApiAppMedicalHistoryByIdMedicalHistoryData): CancelablePromise<GetApiAppMedicalHistoryByIdMedicalHistoryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-history/{id}/medical-history',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_MedicalHistory_MedicalHistoryDto Success
 * @throws ApiError
 */
export const putApiAppMedicalHistoryByIdMedicalHistory = (data: PutApiAppMedicalHistoryByIdMedicalHistoryData): CancelablePromise<PutApiAppMedicalHistoryByIdMedicalHistoryResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/medical-history/{id}/medical-history',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.queueId
 * @returns Mediflow_DTOs_MedicalHistory_MedicalHistoryDto Success
 * @throws ApiError
 */
export const getApiAppMedicalHistoryMedicalHistoryByQueueIdByQueueId = (data: GetApiAppMedicalHistoryMedicalHistoryByQueueIdByQueueIdData): CancelablePromise<GetApiAppMedicalHistoryMedicalHistoryByQueueIdByQueueIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-history/medical-history-by-queue-id/{queueId}',
    path: {
        queueId: data.queueId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.queueIds
 * @returns Mediflow_DTOs_MedicalHistory_MedicalHistoryDto Success
 * @throws ApiError
 */
export const getApiAppMedicalHistoryMedicalHistoryListByQueueIds = (data: GetApiAppMedicalHistoryMedicalHistoryListByQueueIdsData = {}): CancelablePromise<GetApiAppMedicalHistoryMedicalHistoryListByQueueIdsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-history/medical-history-list-by-queue-ids',
    query: {
        queueIds: data.queueIds
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @param data.date
 * @returns Mediflow_DTOs_MedicalHistory_MedicalHistoryDto Success
 * @throws ApiError
 */
export const getApiAppMedicalHistoryMedicalHistoryListByPatientId = (data: GetApiAppMedicalHistoryMedicalHistoryListByPatientIdData): CancelablePromise<GetApiAppMedicalHistoryMedicalHistoryListByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-history/medical-history-list/{patientId}',
    path: {
        patientId: data.patientId
    },
    query: {
        date: data.date
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @returns Mediflow_DTOs_MedicalHistory_MedicalHistoryTabItemDto Success
 * @throws ApiError
 */
export const getApiAppMedicalHistoryMedicalHistoryTabItemsByPatientId = (data: GetApiAppMedicalHistoryMedicalHistoryTabItemsByPatientIdData): CancelablePromise<GetApiAppMedicalHistoryMedicalHistoryTabItemsByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-history/medical-history-tab-items/{patientId}',
    path: {
        patientId: data.patientId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_MedicalSupplies_MedicalSupplyDto Success
 * @throws ApiError
 */
export const postApiAppMedicalSupplyMedicalSupply = (data: PostApiAppMedicalSupplyMedicalSupplyData = {}): CancelablePromise<PostApiAppMedicalSupplyMedicalSupplyResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/medical-supply/medical-supply',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppMedicalSupplyByIdMedicalSupply = (data: DeleteApiAppMedicalSupplyByIdMedicalSupplyData): CancelablePromise<DeleteApiAppMedicalSupplyByIdMedicalSupplyResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/medical-supply/{id}/medical-supply',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_MedicalSupplies_MedicalSupplyDto Success
 * @throws ApiError
 */
export const getApiAppMedicalSupplyByIdMedicalSupply = (data: GetApiAppMedicalSupplyByIdMedicalSupplyData): CancelablePromise<GetApiAppMedicalSupplyByIdMedicalSupplyResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-supply/{id}/medical-supply',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_MedicalSupplies_MedicalSupplyDto Success
 * @throws ApiError
 */
export const putApiAppMedicalSupplyByIdMedicalSupply = (data: PutApiAppMedicalSupplyByIdMedicalSupplyData): CancelablePromise<PutApiAppMedicalSupplyByIdMedicalSupplyResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/medical-supply/{id}/medical-supply',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Mediflow_DTOs_MedicalSupplies_MedicalSupplyDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiAppMedicalSupplyMedicalSupplyList = (): CancelablePromise<GetApiAppMedicalSupplyMedicalSupplyListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medical-supply/medical-supply-list',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Medicines_MedicineDto Success
 * @throws ApiError
 */
export const postApiAppMedicineMedicine = (data: PostApiAppMedicineMedicineData = {}): CancelablePromise<PostApiAppMedicineMedicineResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/medicine/medicine',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppMedicineByIdMedicine = (data: DeleteApiAppMedicineByIdMedicineData): CancelablePromise<DeleteApiAppMedicineByIdMedicineResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/medicine/{id}/medicine',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Medicines_MedicineDto Success
 * @throws ApiError
 */
export const getApiAppMedicineByIdMedicine = (data: GetApiAppMedicineByIdMedicineData): CancelablePromise<GetApiAppMedicineByIdMedicineResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medicine/{id}/medicine',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Medicines_MedicineDto Success
 * @throws ApiError
 */
export const putApiAppMedicineByIdMedicine = (data: PutApiAppMedicineByIdMedicineData): CancelablePromise<PutApiAppMedicineByIdMedicineResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/medicine/{id}/medicine',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Mediflow_DTOs_Medicines_MedicineDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiAppMedicineMedicineList = (): CancelablePromise<GetApiAppMedicineMedicineListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/medicine/medicine-list',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Patient_PatientDto Success
 * @throws ApiError
 */
export const getApiAppPatientByIdPatient = (data: GetApiAppPatientByIdPatientData): CancelablePromise<GetApiAppPatientByIdPatientResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient/{id}/patient',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppPatientByIdPatient = (data: DeleteApiAppPatientByIdPatientData): CancelablePromise<DeleteApiAppPatientByIdPatientResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/patient/{id}/patient',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Patient_PatientDto Success
 * @throws ApiError
 */
export const putApiAppPatientByIdPatient = (data: PutApiAppPatientByIdPatientData): CancelablePromise<PutApiAppPatientByIdPatientResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/patient/{id}/patient',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Patient_PatientDto Success
 * @throws ApiError
 */
export const postApiAppPatientPatient = (data: PostApiAppPatientPatientData = {}): CancelablePromise<PostApiAppPatientPatientResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/patient/patient',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.input
 * @returns Mediflow_DTOs_Patient_PatientDto Success
 * @throws ApiError
 */
export const getApiAppPatientPatientsByNameOrNationalId = (data: GetApiAppPatientPatientsByNameOrNationalIdData = {}): CancelablePromise<GetApiAppPatientPatientsByNameOrNationalIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient/patients-by-name-or-national-id',
    query: {
        input: data.input
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Patient_PatientDto Success
 * @throws ApiError
 */
export const getApiAppPatientPatients = (): CancelablePromise<GetApiAppPatientPatientsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient/patients',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.skipCount
 * @param data.maxResultCount
 * @param data.searchValue
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Mediflow_DTOs_Patient_PatientListItemDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiAppPatientPatientList = (data: GetApiAppPatientPatientListData = {}): CancelablePromise<GetApiAppPatientPatientListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient/patient-list',
    query: {
        skipCount: data.skipCount,
        maxResultCount: data.maxResultCount,
        searchValue: data.searchValue
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueDto Success
 * @throws ApiError
 */
export const postApiAppPatientQueueEnqueuePatient = (data: PostApiAppPatientQueueEnqueuePatientData = {}): CancelablePromise<PostApiAppPatientQueueEnqueuePatientResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/patient-queue/enqueue-patient',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppPatientQueueByIdCompleteQueue = (data: PostApiAppPatientQueueByIdCompleteQueueData): CancelablePromise<PostApiAppPatientQueueByIdCompleteQueueResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/patient-queue/{id}/complete-queue',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppPatientQueueByIdCancelQueue = (data: PostApiAppPatientQueueByIdCancelQueueData): CancelablePromise<PostApiAppPatientQueueByIdCancelQueueResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/patient-queue/{id}/cancel-queue',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns number Success
 * @throws ApiError
 */
export const getApiAppPatientQueueLatestQueueNumber = (): CancelablePromise<GetApiAppPatientQueueLatestQueueNumberResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-queue/latest-queue-number',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.dateTime
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueDto Success
 * @throws ApiError
 */
export const getApiAppPatientQueuePatientQueues = (data: GetApiAppPatientQueuePatientQueuesData = {}): CancelablePromise<GetApiAppPatientQueuePatientQueuesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-queue/patient-queues',
    query: {
        dateTime: data.dateTime
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppPatientQueueByIdPrioritizeQueue = (data: PostApiAppPatientQueueByIdPrioritizeQueueData): CancelablePromise<PostApiAppPatientQueueByIdPrioritizeQueueResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/patient-queue/{id}/prioritize-queue',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.doctorId
 * @param data.status
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiAppPatientQueueByIdQueueStatusByDoctorId = (data: PutApiAppPatientQueueByIdQueueStatusByDoctorIdData): CancelablePromise<PutApiAppPatientQueueByIdQueueStatusByDoctorIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/patient-queue/{id}/queue-status/{doctorId}',
    path: {
        id: data.id,
        doctorId: data.doctorId
    },
    query: {
        status: data.status
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueDto Success
 * @throws ApiError
 */
export const putApiAppPatientQueueQueue = (data: PutApiAppPatientQueueQueueData = {}): CancelablePromise<PutApiAppPatientQueueQueueResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/patient-queue/queue',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueDto Success
 * @throws ApiError
 */
export const getApiAppPatientQueueByIdPatientQueueByIdForClerk = (data: GetApiAppPatientQueueByIdPatientQueueByIdForClerkData): CancelablePromise<GetApiAppPatientQueueByIdPatientQueueByIdForClerkResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-queue/{id}/patient-queue-by-id-for-clerk',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns binary Success
 * @throws ApiError
 */
export const postApiAppPatientQueueGenerateMcPdf = (data: PostApiAppPatientQueueGenerateMcPdfData = {}): CancelablePromise<PostApiAppPatientQueueGenerateMcPdfResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/patient-queue/generate-mc-pdf',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueDto Success
 * @throws ApiError
 */
export const getApiAppPatientQueueByIdLatestQueue = (data: GetApiAppPatientQueueByIdLatestQueueData): CancelablePromise<GetApiAppPatientQueueByIdLatestQueueResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-queue/{id}/latest-queue',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueDto Success
 * @throws ApiError
 */
export const getApiAppPatientQueueLatestQueueForAllPatients = (): CancelablePromise<GetApiAppPatientQueueLatestQueueForAllPatientsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-queue/latest-queue-for-all-patients',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueWithNotesDto Success
 * @throws ApiError
 */
export const getApiAppPatientQueueQueuesForPatientByPatientId = (data: GetApiAppPatientQueueQueuesForPatientByPatientIdData): CancelablePromise<GetApiAppPatientQueueQueuesForPatientByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-queue/queues-for-patient/{patientId}',
    path: {
        patientId: data.patientId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.sessionId
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppPatientSessionEndPatientSessionBySessionId = (data: PostApiAppPatientSessionEndPatientSessionBySessionIdData): CancelablePromise<PostApiAppPatientSessionEndPatientSessionBySessionIdResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/patient-session/end-patient-session/{sessionId}',
    path: {
        sessionId: data.sessionId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @returns Mediflow_DTOs_PatientSessions_PatientSessionDto Success
 * @throws ApiError
 */
export const getApiAppPatientSessionPatientSessionByPatientId = (data: GetApiAppPatientSessionPatientSessionByPatientIdData): CancelablePromise<GetApiAppPatientSessionPatientSessionByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-session/patient-session/{patientId}',
    path: {
        patientId: data.patientId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.sessionId
 * @returns Mediflow_DTOs_PatientQueues_PatientQueueDto Success
 * @throws ApiError
 */
export const getApiAppPatientSessionQueueEntriesBySessionId = (data: GetApiAppPatientSessionQueueEntriesBySessionIdData): CancelablePromise<GetApiAppPatientSessionQueueEntriesBySessionIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-session/queue-entries/{sessionId}',
    path: {
        sessionId: data.sessionId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @returns Mediflow_DTOs_PatientSessions_PatientSessionDto Success
 * @throws ApiError
 */
export const getApiAppPatientSessionLatestPatientSessionByPatientId = (data: GetApiAppPatientSessionLatestPatientSessionByPatientIdData): CancelablePromise<GetApiAppPatientSessionLatestPatientSessionByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/patient-session/latest-patient-session/{patientId}',
    path: {
        patientId: data.patientId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Payments_PaymentDto Success
 * @throws ApiError
 */
export const postApiAppPaymentPayment = (data: PostApiAppPaymentPaymentData = {}): CancelablePromise<PostApiAppPaymentPaymentResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/payment/payment',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppPaymentPayments = (data: PostApiAppPaymentPaymentsData = {}): CancelablePromise<PostApiAppPaymentPaymentsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/payment/payments',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.ids
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppPaymentPayments = (data: DeleteApiAppPaymentPaymentsData = {}): CancelablePromise<DeleteApiAppPaymentPaymentsResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/payment/payments',
    query: {
        ids: data.ids
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Payments_PaymentDto Success
 * @throws ApiError
 */
export const getApiAppPaymentPayments = (): CancelablePromise<GetApiAppPaymentPaymentsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/payment/payments',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppPaymentByIdPayment = (data: DeleteApiAppPaymentByIdPaymentData): CancelablePromise<DeleteApiAppPaymentByIdPaymentResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/payment/{id}/payment',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Payments_PaymentDto Success
 * @throws ApiError
 */
export const getApiAppPaymentByIdPayment = (data: GetApiAppPaymentByIdPaymentData): CancelablePromise<GetApiAppPaymentByIdPaymentResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/payment/{id}/payment',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Payments_PaymentDto Success
 * @throws ApiError
 */
export const putApiAppPaymentByIdPayment = (data: PutApiAppPaymentByIdPaymentData): CancelablePromise<PutApiAppPaymentByIdPaymentResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/payment/{id}/payment',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.invoiceId
 * @returns Mediflow_DTOs_Payments_PaymentDto Success
 * @throws ApiError
 */
export const getApiAppPaymentPaymentsByInvoiceIdByInvoiceId = (data: GetApiAppPaymentPaymentsByInvoiceIdByInvoiceIdData): CancelablePromise<GetApiAppPaymentPaymentsByInvoiceIdByInvoiceIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/payment/payments-by-invoice-id/{invoiceId}',
    path: {
        invoiceId: data.invoiceId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @returns Mediflow_DTOs_Payments_PaymentDto Success
 * @throws ApiError
 */
export const getApiAppPaymentPaymentsByPatientIdByPatientId = (data: GetApiAppPaymentPaymentsByPatientIdByPatientIdData): CancelablePromise<GetApiAppPaymentPaymentsByPatientIdByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/payment/payments-by-patient-id/{patientId}',
    path: {
        patientId: data.patientId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @returns Volo_Abp_PermissionManagement_GetPermissionListResultDto Success
 * @throws ApiError
 */
export const getApiPermissionManagementPermissions = (data: GetApiPermissionManagementPermissionsData = {}): CancelablePromise<GetApiPermissionManagementPermissionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/permission-management/permissions',
    query: {
        providerName: data.providerName,
        providerKey: data.providerKey
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.providerName
 * @param data.providerKey
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiPermissionManagementPermissions = (data: PutApiPermissionManagementPermissionsData = {}): CancelablePromise<PutApiPermissionManagementPermissionsResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/permission-management/permissions',
    query: {
        providerName: data.providerName,
        providerKey: data.providerKey
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Prescriptions_PrescriptionDto Success
 * @throws ApiError
 */
export const postApiAppPrescriptionPrescription = (data: PostApiAppPrescriptionPrescriptionData = {}): CancelablePromise<PostApiAppPrescriptionPrescriptionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/prescription/prescription',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppPrescriptionPrescriptions = (data: PostApiAppPrescriptionPrescriptionsData = {}): CancelablePromise<PostApiAppPrescriptionPrescriptionsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/prescription/prescriptions',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.ids
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppPrescriptionPrescriptions = (data: DeleteApiAppPrescriptionPrescriptionsData = {}): CancelablePromise<DeleteApiAppPrescriptionPrescriptionsResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/prescription/prescriptions',
    query: {
        ids: data.ids
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Prescriptions_PrescriptionDto Success
 * @throws ApiError
 */
export const getApiAppPrescriptionPrescriptions = (): CancelablePromise<GetApiAppPrescriptionPrescriptionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/prescription/prescriptions',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppPrescriptionByIdPrescription = (data: DeleteApiAppPrescriptionByIdPrescriptionData): CancelablePromise<DeleteApiAppPrescriptionByIdPrescriptionResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/prescription/{id}/prescription',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_Prescriptions_PrescriptionDto Success
 * @throws ApiError
 */
export const getApiAppPrescriptionByIdPrescription = (data: GetApiAppPrescriptionByIdPrescriptionData): CancelablePromise<GetApiAppPrescriptionByIdPrescriptionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/prescription/{id}/prescription',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_Prescriptions_PrescriptionDto Success
 * @throws ApiError
 */
export const putApiAppPrescriptionByIdPrescription = (data: PutApiAppPrescriptionByIdPrescriptionData): CancelablePromise<PutApiAppPrescriptionByIdPrescriptionResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/prescription/{id}/prescription',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.medicalHistoryIds
 * @returns Mediflow_DTOs_Prescriptions_PrescriptionDto Success
 * @throws ApiError
 */
export const getApiAppPrescriptionPrescriptionsByMedicalHistoryIds = (data: GetApiAppPrescriptionPrescriptionsByMedicalHistoryIdsData = {}): CancelablePromise<GetApiAppPrescriptionPrescriptionsByMedicalHistoryIdsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/prescription/prescriptions-by-medical-history-ids',
    query: {
        medicalHistoryIds: data.medicalHistoryIds
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.patientId
 * @returns Mediflow_DTOs_Prescriptions_PrescriptionDto Success
 * @throws ApiError
 */
export const getApiAppPrescriptionPrescriptionsByPatientIdByPatientId = (data: GetApiAppPrescriptionPrescriptionsByPatientIdByPatientIdData): CancelablePromise<GetApiAppPrescriptionPrescriptionsByPatientIdByPatientIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/prescription/prescriptions-by-patient-id/{patientId}',
    path: {
        patientId: data.patientId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.prescriptionId
 * @returns Mediflow_DTOs_MedicalHistoryPrescriptionItems_MedicalHistoryPrescriptionItemDto Success
 * @throws ApiError
 */
export const getApiAppPrescriptionMedicalHistoryPrescriptionItemsByPrescriptionIdByPrescriptionId = (data: GetApiAppPrescriptionMedicalHistoryPrescriptionItemsByPrescriptionIdByPrescriptionIdData): CancelablePromise<GetApiAppPrescriptionMedicalHistoryPrescriptionItemsByPrescriptionIdByPrescriptionIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/prescription/medical-history-prescription-items-by-prescription-id/{prescriptionId}',
    path: {
        prescriptionId: data.prescriptionId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_Account_ProfileDto Success
 * @throws ApiError
 */
export const getApiAccountMyProfile = (): CancelablePromise<GetApiAccountMyProfileResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/account/my-profile',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Volo_Abp_Account_ProfileDto Success
 * @throws ApiError
 */
export const putApiAccountMyProfile = (data: PutApiAccountMyProfileData = {}): CancelablePromise<PutApiAccountMyProfileResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/account/my-profile',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAccountMyProfileChangePassword = (data: PostApiAccountMyProfileChangePasswordData = {}): CancelablePromise<PostApiAccountMyProfileChangePasswordResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/account/my-profile/change-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns binary Success
 * @throws ApiError
 */
export const getApiAppReportARAgingReportExcel = (): CancelablePromise<GetApiAppReportArAgingReportExcelResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/report/a-rAging-report-excel',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Reports_AccountsReceivableAgingReportDto Success
 * @throws ApiError
 */
export const getApiAppReportARAgingReport = (): CancelablePromise<GetApiAppReportArAgingReportResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/report/a-rAging-report',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.date
 * @returns Mediflow_DTOs_Reports_DailyReportDto Success
 * @throws ApiError
 */
export const getApiAppReportDailyReport = (data: GetApiAppReportDailyReportData = {}): CancelablePromise<GetApiAppReportDailyReportResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/report/daily-report',
    query: {
        date: data.date
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.date
 * @returns binary Success
 * @throws ApiError
 */
export const getApiAppReportDailyReportExcel = (data: GetApiAppReportDailyReportExcelData = {}): CancelablePromise<GetApiAppReportDailyReportExcelResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/report/daily-report-excel',
    query: {
        date: data.date
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_Application_Dtos_ListResultDto_1<__Volo_Abp_Identity_IdentityRoleDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiIdentityRolesAll = (): CancelablePromise<GetApiIdentityRolesAllResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/roles/all',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Volo_Abp_Identity_IdentityRoleDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiIdentityRoles = (data: GetApiIdentityRolesData = {}): CancelablePromise<GetApiIdentityRolesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/roles',
    query: {
        Filter: data.filter,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Volo_Abp_Identity_IdentityRoleDto Success
 * @throws ApiError
 */
export const postApiIdentityRoles = (data: PostApiIdentityRolesData = {}): CancelablePromise<PostApiIdentityRolesResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/identity/roles',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Volo_Abp_Identity_IdentityRoleDto Success
 * @throws ApiError
 */
export const getApiIdentityRolesById = (data: GetApiIdentityRolesByIdData): CancelablePromise<GetApiIdentityRolesByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/roles/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Volo_Abp_Identity_IdentityRoleDto Success
 * @throws ApiError
 */
export const putApiIdentityRolesById = (data: PutApiIdentityRolesByIdData): CancelablePromise<PutApiIdentityRolesByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/identity/roles/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiIdentityRolesById = (data: DeleteApiIdentityRolesByIdData): CancelablePromise<DeleteApiIdentityRolesByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/identity/roles/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_ServivceProviders_CreatedServiceProviderDto Success
 * @throws ApiError
 */
export const postApiAppServiceProvider = (data: PostApiAppServiceProviderData = {}): CancelablePromise<PostApiAppServiceProviderResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/service-provider',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_ServivceProviders_ServiceProviderListItemDto Success
 * @throws ApiError
 */
export const getApiAppServiceProvider = (): CancelablePromise<GetApiAppServiceProviderResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/service-provider',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppServiceProviderById = (data: DeleteApiAppServiceProviderByIdData): CancelablePromise<DeleteApiAppServiceProviderByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/service-provider/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_ServivceProviders_ServiceProviderDto Success
 * @throws ApiError
 */
export const getApiAppServiceProviderById = (data: GetApiAppServiceProviderByIdData): CancelablePromise<GetApiAppServiceProviderByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/service-provider/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_ServivceProviders_CreatedServiceProviderDto Success
 * @throws ApiError
 */
export const putApiAppServiceProviderById = (data: PutApiAppServiceProviderByIdData): CancelablePromise<PutApiAppServiceProviderByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/service-provider/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.tenantId
 * @returns Mediflow_DTOs_ServivceProviders_ServiceProviderDto Success
 * @throws ApiError
 */
export const getApiAppServiceProviderServiceProviderForEditByTenantIdByTenantId = (data: GetApiAppServiceProviderServiceProviderForEditByTenantIdByTenantIdData): CancelablePromise<GetApiAppServiceProviderServiceProviderForEditByTenantIdByTenantIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/service-provider/service-provider-for-edit-by-tenant-id/{tenantId}',
    path: {
        tenantId: data.tenantId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_ServivceProviders_CreatedServiceProviderDto Success
 * @throws ApiError
 */
export const postApiAppServiceProviderByIdNewUpdate = (data: PostApiAppServiceProviderByIdNewUpdateData): CancelablePromise<PostApiAppServiceProviderByIdNewUpdateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/service-provider/{id}/new-update',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.serviceProviderType
 * @returns string Success
 * @throws ApiError
 */
export const getApiAppServiceProviderNewShortId = (data: GetApiAppServiceProviderNewShortIdData = {}): CancelablePromise<GetApiAppServiceProviderNewShortIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/service-provider/new-short-id',
    query: {
        serviceProviderType: data.serviceProviderType
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.type
 * @returns Mediflow_DTOs_ServivceProviders_CreatedServiceProviderDto Success
 * @throws ApiError
 */
export const getApiAppServiceProviderByType = (data: GetApiAppServiceProviderByTypeData = {}): CancelablePromise<GetApiAppServiceProviderByTypeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/service-provider/by-type',
    query: {
        type: data.type
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_ServivceProviders_CreatedServiceProviderDto Success
 * @throws ApiError
 */
export const postApiAppServiceProviderByIdResetPassword = (data: PostApiAppServiceProviderByIdResetPasswordData): CancelablePromise<PostApiAppServiceProviderByIdResetPasswordResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/service-provider/{id}/reset-password',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Staffs_PermissionTreeNodeDto Success
 * @throws ApiError
 */
export const getApiAppStaffPermissions = (): CancelablePromise<GetApiAppStaffPermissionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/staff/permissions',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiAppStaffAssignPermissionsToStaffByUserId = (data: PostApiAppStaffAssignPermissionsToStaffByUserIdData): CancelablePromise<PostApiAppStaffAssignPermissionsToStaffByUserIdResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/staff/assign-permissions-to-staff/{userId}',
    path: {
        userId: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_Staffs_StaffDto Success
 * @throws ApiError
 */
export const postApiAppStaffStaff = (data: PostApiAppStaffStaffData = {}): CancelablePromise<PostApiAppStaffStaffResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/staff/staff',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Staffs_StaffDto Success
 * @throws ApiError
 */
export const getApiAppStaffStaff = (): CancelablePromise<GetApiAppStaffStaffResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/staff/staff',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.staffId
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiAppStaffStaffByStaffId = (data: PutApiAppStaffStaffByStaffIdData): CancelablePromise<PutApiAppStaffStaffByStaffIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/staff/staff/{staffId}',
    path: {
        staffId: data.staffId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.staffId
 * @returns Mediflow_DTOs_Staffs_CreateEditStaffDto Success
 * @throws ApiError
 */
export const getApiAppStaffStaffForEditByStaffId = (data: GetApiAppStaffStaffForEditByStaffIdData): CancelablePromise<GetApiAppStaffStaffForEditByStaffIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/staff/staff-for-edit/{staffId}',
    path: {
        staffId: data.staffId
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_Staffs_StaffListItemDto Success
 * @throws ApiError
 */
export const getApiAppStaffStaffList = (): CancelablePromise<GetApiAppStaffStaffListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/staff/staff-list',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Volo_Abp_TenantManagement_TenantDto Success
 * @throws ApiError
 */
export const getApiMultiTenancyTenantsById = (data: GetApiMultiTenancyTenantsByIdData): CancelablePromise<GetApiMultiTenancyTenantsByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy/tenants/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Volo_Abp_TenantManagement_TenantDto Success
 * @throws ApiError
 */
export const putApiMultiTenancyTenantsById = (data: PutApiMultiTenancyTenantsByIdData): CancelablePromise<PutApiMultiTenancyTenantsByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/multi-tenancy/tenants/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiMultiTenancyTenantsById = (data: DeleteApiMultiTenancyTenantsByIdData): CancelablePromise<DeleteApiMultiTenancyTenantsByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/multi-tenancy/tenants/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Volo_Abp_TenantManagement_TenantDto__Volo_Abp_TenantManagement_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiMultiTenancyTenants = (data: GetApiMultiTenancyTenantsData = {}): CancelablePromise<GetApiMultiTenancyTenantsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy/tenants',
    query: {
        Filter: data.filter,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Volo_Abp_TenantManagement_TenantDto Success
 * @throws ApiError
 */
export const postApiMultiTenancyTenants = (data: PostApiMultiTenancyTenantsData = {}): CancelablePromise<PostApiMultiTenancyTenantsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/multi-tenancy/tenants',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns string Success
 * @throws ApiError
 */
export const getApiMultiTenancyTenantsByIdDefaultConnectionString = (data: GetApiMultiTenancyTenantsByIdDefaultConnectionStringData): CancelablePromise<GetApiMultiTenancyTenantsByIdDefaultConnectionStringResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.defaultConnectionString
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiMultiTenancyTenantsByIdDefaultConnectionString = (data: PutApiMultiTenancyTenantsByIdDefaultConnectionStringData): CancelablePromise<PutApiMultiTenancyTenantsByIdDefaultConnectionStringResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
    path: {
        id: data.id
    },
    query: {
        defaultConnectionString: data.defaultConnectionString
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiMultiTenancyTenantsByIdDefaultConnectionString = (data: DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringData): CancelablePromise<DeleteApiMultiTenancyTenantsByIdDefaultConnectionStringResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns string Success
 * @throws ApiError
 */
export const getApiSettingManagementTimezone = (): CancelablePromise<GetApiSettingManagementTimezoneResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/setting-management/timezone',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.timezone
 * @returns unknown Success
 * @throws ApiError
 */
export const postApiSettingManagementTimezone = (data: PostApiSettingManagementTimezoneData = {}): CancelablePromise<PostApiSettingManagementTimezoneResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/setting-management/timezone',
    query: {
        timezone: data.timezone
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_NameValue Success
 * @throws ApiError
 */
export const getApiSettingManagementTimezoneTimezones = (): CancelablePromise<GetApiSettingManagementTimezoneTimezonesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/setting-management/timezone/timezones',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Volo_Abp_Identity_IdentityUserDto Success
 * @throws ApiError
 */
export const getApiIdentityUsersById = (data: GetApiIdentityUsersByIdData): CancelablePromise<GetApiIdentityUsersByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Volo_Abp_Identity_IdentityUserDto Success
 * @throws ApiError
 */
export const putApiIdentityUsersById = (data: PutApiIdentityUsersByIdData): CancelablePromise<PutApiIdentityUsersByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/identity/users/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiIdentityUsersById = (data: DeleteApiIdentityUsersByIdData): CancelablePromise<DeleteApiIdentityUsersByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/identity/users/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns Volo_Abp_Application_Dtos_PagedResultDto_1<__Volo_Abp_Identity_IdentityUserDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiIdentityUsers = (data: GetApiIdentityUsersData = {}): CancelablePromise<GetApiIdentityUsersResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users',
    query: {
        Filter: data.filter,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Volo_Abp_Identity_IdentityUserDto Success
 * @throws ApiError
 */
export const postApiIdentityUsers = (data: PostApiIdentityUsersData = {}): CancelablePromise<PostApiIdentityUsersResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/identity/users',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Volo_Abp_Application_Dtos_ListResultDto_1<__Volo_Abp_Identity_IdentityRoleDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiIdentityUsersByIdRoles = (data: GetApiIdentityUsersByIdRolesData): CancelablePromise<GetApiIdentityUsersByIdRolesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/{id}/roles',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putApiIdentityUsersByIdRoles = (data: PutApiIdentityUsersByIdRolesData): CancelablePromise<PutApiIdentityUsersByIdRolesResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/identity/users/{id}/roles',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Volo_Abp_Application_Dtos_ListResultDto_1<__Volo_Abp_Identity_IdentityRoleDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiIdentityUsersAssignableRoles = (): CancelablePromise<GetApiIdentityUsersAssignableRolesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/assignable-roles',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.userName
 * @returns Volo_Abp_Identity_IdentityUserDto Success
 * @throws ApiError
 */
export const getApiIdentityUsersByUsernameByUserName = (data: GetApiIdentityUsersByUsernameByUserNameData): CancelablePromise<GetApiIdentityUsersByUsernameByUserNameResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/by-username/{userName}',
    path: {
        userName: data.userName
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.email
 * @returns Volo_Abp_Identity_IdentityUserDto Success
 * @throws ApiError
 */
export const getApiIdentityUsersByEmailByEmail = (data: GetApiIdentityUsersByEmailByEmailData): CancelablePromise<GetApiIdentityUsersByEmailByEmailResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/by-email/{email}',
    path: {
        email: data.email
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Volo_Abp_Users_UserData Success
 * @throws ApiError
 */
export const getApiIdentityUsersLookupById = (data: GetApiIdentityUsersLookupByIdData): CancelablePromise<GetApiIdentityUsersLookupByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.userName
 * @returns Volo_Abp_Users_UserData Success
 * @throws ApiError
 */
export const getApiIdentityUsersLookupByUsernameByUserName = (data: GetApiIdentityUsersLookupByUsernameByUserNameData): CancelablePromise<GetApiIdentityUsersLookupByUsernameByUserNameResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/by-username/{userName}',
    path: {
        userName: data.userName
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.filter
 * @param data.sorting
 * @param data.skipCount
 * @param data.maxResultCount
 * @returns Volo_Abp_Application_Dtos_ListResultDto_1<__Volo_Abp_Users_UserData__Volo_Abp_Users_Abstractions__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null_> Success
 * @throws ApiError
 */
export const getApiIdentityUsersLookupSearch = (data: GetApiIdentityUsersLookupSearchData = {}): CancelablePromise<GetApiIdentityUsersLookupSearchResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/search',
    query: {
        Filter: data.filter,
        Sorting: data.sorting,
        SkipCount: data.skipCount,
        MaxResultCount: data.maxResultCount
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.filter
 * @returns number Success
 * @throws ApiError
 */
export const getApiIdentityUsersLookupCount = (data: GetApiIdentityUsersLookupCountData = {}): CancelablePromise<GetApiIdentityUsersLookupCountResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/identity/users/lookup/count',
    query: {
        Filter: data.filter
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Mediflow_DTOs_VisitTemplates_VisitTemplateDto Success
 * @throws ApiError
 */
export const postApiAppVisitTemplateVisitTemplate = (data: PostApiAppVisitTemplateVisitTemplateData = {}): CancelablePromise<PostApiAppVisitTemplateVisitTemplateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/app/visit-template/visit-template',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteApiAppVisitTemplateByIdVisitTemplate = (data: DeleteApiAppVisitTemplateByIdVisitTemplateData): CancelablePromise<DeleteApiAppVisitTemplateByIdVisitTemplateResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/app/visit-template/{id}/visit-template',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @returns Mediflow_DTOs_VisitTemplates_VisitTemplateDto Success
 * @throws ApiError
 */
export const getApiAppVisitTemplateByIdVisitTemplate = (data: GetApiAppVisitTemplateByIdVisitTemplateData): CancelablePromise<GetApiAppVisitTemplateByIdVisitTemplateResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/visit-template/{id}/visit-template',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns Mediflow_DTOs_VisitTemplates_VisitTemplateDto Success
 * @throws ApiError
 */
export const putApiAppVisitTemplateByIdVisitTemplate = (data: PutApiAppVisitTemplateByIdVisitTemplateData): CancelablePromise<PutApiAppVisitTemplateByIdVisitTemplateResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/app/visit-template/{id}/visit-template',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };

/**
 * @returns Mediflow_DTOs_VisitTemplates_VisitTemplateDto Success
 * @throws ApiError
 */
export const getApiAppVisitTemplateVisitTemplates = (): CancelablePromise<GetApiAppVisitTemplateVisitTemplatesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/app/visit-template/visit-templates',
    errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Server Error',
        501: 'Server Error'
    }
}); };
// This file is auto-generated by @hey-api/openapi-ts

export const Mediflow_DTOs_ChargeableServices_ChargeableServiceDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.ChargeableServices.ChargeableServiceType'
        },
        remark: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_ChargeableServices_CreateUpdateChargeableServiceDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.ChargeableServices.ChargeableServiceType'
        },
        remark: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Common_AddressDetailsDtoSchema = {
    type: 'object',
    properties: {
        street: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        state: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Doctors_CreateUpdateDoctorDtoSchema = {
    required: ['firstName', 'lastName'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            minLength: 1,
            type: 'string'
        },
        lastName: {
            minLength: 1,
            type: 'string'
        },
        mmcNumber: {
            type: 'string',
            nullable: true
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        joinDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        userName: {
            type: 'string',
            nullable: true
        },
        newPassword: {
            type: 'string',
            nullable: true
        },
        currentPassword: {
            type: 'string',
            nullable: true
        },
        permissions: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Doctors.PermissionAssignmentBatchDto'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Doctors_DoctorDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        mmcNumber: {
            type: 'string',
            nullable: true
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        isActive: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        isOnDuty: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Doctors_DoctorListItemDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        mmcNumber: {
            type: 'string',
            nullable: true
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        isActive: {
            type: 'boolean'
        },
        username: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Doctors_PermissionAssignmentBatchDtoSchema = {
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Doctors.PermissionAssignmentDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Doctors_PermissionAssignmentDtoSchema = {
    type: 'object',
    properties: {
        permission: {
            type: 'string',
            nullable: true
        },
        assigned: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Doctors_PermissionTreeNodeDtoSchema = {
    type: 'object',
    properties: {
        text: {
            type: 'string',
            nullable: true
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Doctors.PermissionTreeNodeDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_DocumentTemplates_CreateUpdateDocumentTemplateDtoSchema = {
    type: 'object',
    properties: {
        templateName: {
            type: 'string',
            nullable: true
        },
        templateType: {
            '$ref': '#/components/schemas/Mediflow.Entities.DocumentTemplates.TemplateType'
        },
        htmlContent: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_DocumentTemplates_DocumentTemplateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        htmlContent: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Documents_CreateUpdateDocumentDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        htmlContent: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.Documents.DocumentType'
        },
        externalBlobId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        patientId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        patientQueueId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        patientSessionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        fileName: {
            type: 'string',
            nullable: true
        },
        fileContentType: {
            type: 'string',
            nullable: true
        },
        fileContentLength: {
            type: 'integer',
            format: 'int64',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Documents_DocumentDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creatorId: {
            type: 'string',
            format: 'uuid'
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        htmlContent: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.Documents.DocumentType'
        },
        externalBlobId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_ExternalBlobs_ExternalBlobDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        fileSize: {
            type: 'integer',
            format: 'int64'
        },
        fileUrl: {
            type: 'string',
            nullable: true
        },
        mimeType: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_FieldTemplates_CreateUpdateFieldTemplateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        fieldName: {
            type: 'string',
            nullable: true
        },
        fieldType: {
            '$ref': '#/components/schemas/Mediflow.Entities.FieldTemplates.FieldType'
        },
        fieldValue: {
            type: 'string',
            nullable: true
        },
        isOutdated: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_FieldTemplates_FieldTemplateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        fieldName: {
            type: 'string',
            nullable: true
        },
        fieldType: {
            '$ref': '#/components/schemas/Mediflow.Entities.FieldTemplates.FieldType'
        },
        fieldValue: {
            type: 'string',
            nullable: true
        },
        isOutdated: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_InsurancePanels_CreateUpdateInsurancePanelDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        referenceCode: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        website: {
            type: 'string',
            nullable: true
        },
        contactPerson: {
            type: 'string',
            nullable: true
        },
        contactPersonPhoneNumber: {
            type: 'string',
            nullable: true
        },
        contactPersonEmail: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_InsurancePanels_InsurancePanelDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        referenceCode: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        website: {
            type: 'string',
            nullable: true
        },
        contactPerson: {
            type: 'string',
            nullable: true
        },
        contactPersonPhoneNumber: {
            type: 'string',
            nullable: true
        },
        contactPersonEmail: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_InvoiceItems_InvoiceItemDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.InvoiceItems.InvoiceItemType'
        },
        description: {
            type: 'string',
            nullable: true
        },
        quantity: {
            type: 'integer',
            format: 'int32'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        total: {
            type: 'number',
            format: 'double'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        invoiceID: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Invoices_CreateUpdateInvoiceDtoSchema = {
    type: 'object',
    properties: {
        invoiceDate: {
            type: 'string',
            format: 'date-time'
        },
        invoiceNumber: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/Mediflow.Entities.Invoices.InvoiceStatus'
        },
        totalAmount: {
            type: 'number',
            format: 'double'
        },
        paidAmount: {
            type: 'number',
            format: 'double'
        },
        balanceAmount: {
            type: 'number',
            format: 'double'
        },
        paymentDueDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.InvoiceItems.InvoiceItemDto'
            },
            nullable: true
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        createUpdatePaymentDtos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Payments.CreateUpdatePaymentDto'
            },
            nullable: true
        },
        paymentIdsForDelete: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Invoices_InvoiceDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        invoiceDate: {
            type: 'string',
            format: 'date-time'
        },
        invoiceNumber: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/Mediflow.Entities.Invoices.InvoiceStatus'
        },
        totalAmount: {
            type: 'number',
            format: 'double'
        },
        paidAmount: {
            type: 'number',
            format: 'double'
        },
        balanceAmount: {
            type: 'number',
            format: 'double'
        },
        paymentDueDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.InvoiceItems.InvoiceItemDto'
            },
            nullable: true
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        patient: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Patient.PatientDto'
        },
        insurancePanel: {
            '$ref': '#/components/schemas/Mediflow.DTOs.InsurancePanels.InsurancePanelDto'
        },
        insurancePanelId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        payments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Payments.CreateUpdatePaymentDto'
            },
            nullable: true
        },
        visitType: {
            type: 'string',
            nullable: true
        },
        doctorName: {
            type: 'string',
            nullable: true
        },
        invoiceType: {
            '$ref': '#/components/schemas/Mediflow.Entities.Invoices.InvoiceType'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalConsentForms_MedicalConsentFormDtoSchema = {
    type: 'object',
    properties: {
        patientName: {
            type: 'string',
            nullable: true
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        parentGuardianName: {
            type: 'string',
            nullable: true
        },
        medicalInformation: {
            '$ref': '#/components/schemas/Mediflow.DTOs.MedicalConsentForms.MedicalInformationDto'
        },
        consentFormObjectId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalConsentForms_MedicalInformationDtoSchema = {
    type: 'object',
    properties: {
        hasDisability: {
            type: 'boolean'
        },
        disabilityDetails: {
            type: 'string',
            nullable: true
        },
        hasMedicalConditions: {
            type: 'boolean'
        },
        medicalConditionDetails: {
            type: 'string',
            nullable: true
        },
        hasAllergies: {
            type: 'boolean'
        },
        allergyDetails: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalHistory_CreateUpdateMedicalHistoryDtoSchema = {
    required: ['patientId'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        patientQueueId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        patientSessionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        symptoms: {
            type: 'string',
            nullable: true
        },
        note: {
            type: 'string',
            nullable: true
        },
        allergies: {
            type: 'string',
            nullable: true
        },
        medicalHistoryPrescriptionItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.MedicalHistoryPrescriptionItems.MedicalHistoryPrescriptionItemDto'
            },
            nullable: true
        },
        chargeableServices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.ChargeableServices.ChargeableServiceDto'
            },
            nullable: true
        },
        medicalSupplies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.MedicalSupplies.MedicalSupplyDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalHistory_MedicalHistoryDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        patientQueueId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        symptoms: {
            type: 'string',
            nullable: true
        },
        note: {
            type: 'string',
            nullable: true
        },
        allergies: {
            type: 'string',
            nullable: true
        },
        invoiceNumber: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalHistory_MedicalHistoryTabItemDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        date: {
            type: 'string',
            format: 'date-time'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        medicines: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.MedicalHistoryPrescriptionItems.MedicalHistoryPrescriptionItemDto'
            },
            nullable: true
        },
        prescriptionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalHistoryPrescriptionItems_MedicalHistoryPrescriptionItemDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        medicalHistoryId: {
            type: 'string',
            format: 'uuid'
        },
        prescriptionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        medicineId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        brandName: {
            type: 'string',
            nullable: true
        },
        dosage: {
            type: 'string',
            nullable: true
        },
        frequency: {
            type: 'string',
            nullable: true
        },
        duration: {
            type: 'string',
            nullable: true
        },
        remark: {
            type: 'string',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        quantity: {
            type: 'number',
            format: 'double'
        },
        totalPrice: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalSupplies_CreateUpdateMedicalSupplyDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        quantity: {
            type: 'integer',
            format: 'int32'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        cost: {
            type: 'number',
            format: 'double'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        reorderLevel: {
            type: 'string',
            nullable: true
        },
        trackStock: {
            type: 'boolean'
        },
        manufacturer: {
            type: 'string',
            nullable: true
        },
        supplierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        expiryDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        manufactureDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        purchaseDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        arrivalDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        batchNumber: {
            type: 'string',
            nullable: true
        },
        lotNumber: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        name: {
            type: 'string',
            nullable: true
        },
        category: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_MedicalSupplies_MedicalSupplyDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        quantity: {
            type: 'integer',
            format: 'int32'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        cost: {
            type: 'number',
            format: 'double'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        reorderLevel: {
            type: 'string',
            nullable: true
        },
        trackStock: {
            type: 'boolean'
        },
        manufacturer: {
            type: 'string',
            nullable: true
        },
        supplierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        expiryDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        manufactureDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        purchaseDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        arrivalDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        batchNumber: {
            type: 'string',
            nullable: true
        },
        lotNumber: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        name: {
            type: 'string',
            nullable: true
        },
        category: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Medicines_CreateUpdateMedicineDtoSchema = {
    type: 'object',
    properties: {
        quantity: {
            type: 'integer',
            format: 'int32'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        cost: {
            type: 'number',
            format: 'double'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        reorderLevel: {
            type: 'string',
            nullable: true
        },
        trackStock: {
            type: 'boolean'
        },
        manufacturer: {
            type: 'string',
            nullable: true
        },
        supplierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        expiryDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        manufactureDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        purchaseDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        arrivalDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        batchNumber: {
            type: 'string',
            nullable: true
        },
        lotNumber: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        brandName: {
            type: 'string',
            nullable: true
        },
        genericName: {
            type: 'string',
            nullable: true
        },
        holder: {
            type: 'string',
            nullable: true
        },
        registrationNumber: {
            type: 'string',
            nullable: true
        },
        classification: {
            '$ref': '#/components/schemas/Mediflow.Entities.Medicines.MedicineClassification'
        },
        strength: {
            type: 'string',
            nullable: true
        },
        dosageForm: {
            type: 'string',
            nullable: true
        },
        route: {
            type: 'string',
            nullable: true
        },
        frequency: {
            type: 'string',
            nullable: true
        },
        duration: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Medicines_MedicineDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        quantity: {
            type: 'integer',
            format: 'int32'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        cost: {
            type: 'number',
            format: 'double'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        reorderLevel: {
            type: 'string',
            nullable: true
        },
        trackStock: {
            type: 'boolean'
        },
        manufacturer: {
            type: 'string',
            nullable: true
        },
        supplierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        expiryDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        manufactureDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        purchaseDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        arrivalDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        batchNumber: {
            type: 'string',
            nullable: true
        },
        lotNumber: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        brandName: {
            type: 'string',
            nullable: true
        },
        genericName: {
            type: 'string',
            nullable: true
        },
        holder: {
            type: 'string',
            nullable: true
        },
        registrationNumber: {
            type: 'string',
            nullable: true
        },
        classification: {
            '$ref': '#/components/schemas/Mediflow.Entities.Medicines.MedicineClassification'
        },
        strength: {
            type: 'string',
            nullable: true
        },
        dosageForm: {
            type: 'string',
            nullable: true
        },
        route: {
            type: 'string',
            nullable: true
        },
        frequency: {
            type: 'string',
            nullable: true
        },
        duration: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Patient_CreatePatientDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        identificationType: {
            '$ref': '#/components/schemas/Mediflow.Entities.Patients.PatientIdentificationType'
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        nationalityCode: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        emailAddress: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        address: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Common.AddressDetailsDto'
        },
        ethnicity: {
            type: 'string',
            nullable: true
        },
        preferredPaymentType: {
            '$ref': '#/components/schemas/Mediflow.Entities.Payments.PaymentType'
        },
        insurancePanelId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        medicalConsentForm: {
            '$ref': '#/components/schemas/Mediflow.DTOs.MedicalConsentForms.MedicalConsentFormDto'
        },
        consentFormBase64: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Patient_PatientDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        identificationType: {
            '$ref': '#/components/schemas/Mediflow.Entities.Patients.PatientIdentificationType'
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        nationalityCode: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        emailAddress: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        addressDetails: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Common.AddressDetailsDto'
        },
        ethnicity: {
            type: 'string',
            nullable: true
        },
        preferredPaymentId: {
            type: 'string',
            format: 'uuid'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        preferredPaymentType: {
            '$ref': '#/components/schemas/Mediflow.Entities.Payments.PaymentType'
        },
        insurancePanelId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        hasConsent: {
            type: 'boolean'
        },
        medicalConsentForm: {
            '$ref': '#/components/schemas/Mediflow.DTOs.MedicalConsentForms.MedicalConsentFormDto'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Patient_PatientListItemDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        identificationType: {
            '$ref': '#/components/schemas/Mediflow.Entities.Patients.PatientIdentificationType'
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        latestQueue: {
            '$ref': '#/components/schemas/Mediflow.DTOs.PatientQueues.PatientQueueDto'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_PatientQueues_AddPatientQueueDtoSchema = {
    type: 'object',
    properties: {
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        patientName: {
            type: 'string',
            nullable: true
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        arrivalTime: {
            type: 'string',
            format: 'date-time'
        },
        appointmentTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isPrioritised: {
            type: 'boolean'
        },
        symptoms: {
            type: 'string',
            nullable: true
        },
        remark: {
            type: 'string',
            nullable: true
        },
        visitType: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_PatientQueues_GenerateMcDtoSchema = {
    type: 'object',
    properties: {
        doctor: {
            type: 'string',
            nullable: true
        },
        patient: {
            type: 'string',
            nullable: true
        },
        startDate: {
            type: 'string',
            nullable: true
        },
        duration: {
            type: 'string',
            nullable: true
        },
        endDate: {
            type: 'string',
            nullable: true
        },
        remarks: {
            type: 'string',
            nullable: true
        },
        date: {
            type: 'string',
            nullable: true
        },
        signature: {
            type: 'string',
            nullable: true
        },
        reason: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_PatientQueues_PatientQueueDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        queueNumber: {
            type: 'integer',
            format: 'int32'
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        patientName: {
            type: 'string',
            nullable: true
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        arrivalTime: {
            type: 'string',
            format: 'date-time'
        },
        appointmentTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        queueTime: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            '$ref': '#/components/schemas/Mediflow.Entities.PatientQueues.QueueStatus'
        },
        isPrioritised: {
            type: 'boolean'
        },
        patientSessionId: {
            type: 'string',
            format: 'uuid'
        },
        remark: {
            type: 'string',
            nullable: true
        },
        elapsedTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        completionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        visitType: {
            type: 'string',
            nullable: true
        },
        doctorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        invoiceStatus: {
            '$ref': '#/components/schemas/Mediflow.Entities.Invoices.InvoiceStatus'
        },
        lastVisitDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        doctorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_PatientQueues_PatientQueueWithNotesDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        queueTime: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            '$ref': '#/components/schemas/Mediflow.Entities.PatientQueues.QueueStatus'
        },
        elapsedTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        completionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        visitType: {
            type: 'string',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_PatientSessions_PatientSessionDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        startTime: {
            type: 'string',
            format: 'date-time'
        },
        endTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/Mediflow.Entities.PatientSessions.PatientSessionStatus'
        },
        queueEntries: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.Entities.PatientQueues.PatientQueue'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Payments_CreateUpdatePaymentDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        invoiceId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        paymentType: {
            '$ref': '#/components/schemas/Mediflow.Entities.Payments.PaymentType'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        paymentStatus: {
            '$ref': '#/components/schemas/Mediflow.Entities.Payments.PaymentStatus'
        },
        paymentDate: {
            type: 'string',
            format: 'date-time'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        insurancePanelId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        paymentReference: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Payments_PaymentDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        patientID: {
            type: 'string',
            format: 'uuid'
        },
        invoiceID: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        paymentType: {
            type: 'string',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        paymentStatus: {
            '$ref': '#/components/schemas/Mediflow.Entities.Payments.PaymentStatus'
        },
        paymentDate: {
            type: 'string',
            format: 'date-time'
        },
        insurancePanelId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        paymentReference: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Prescriptions_CreateUpdatePrescriptionDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        medicineId: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        frequency: {
            type: 'string',
            nullable: true
        },
        duration: {
            type: 'string',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'string',
            nullable: true
        },
        quantity: {
            type: 'string',
            nullable: true
        },
        total: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Prescriptions_PrescriptionDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        prescriptionDate: {
            type: 'string',
            format: 'date-time'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        prescriptionNumber: {
            type: 'string',
            nullable: true
        },
        patientID: {
            type: 'string',
            format: 'uuid'
        },
        documentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        doctorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Reports_AccountsReceivableAgingReportDtoSchema = {
    type: 'object',
    properties: {
        patientName: {
            type: 'string',
            nullable: true
        },
        invoiceNumber: {
            type: 'string',
            nullable: true
        },
        invoiceDate: {
            type: 'string',
            format: 'date-time'
        },
        paymentDueDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        totalAmount: {
            type: 'number',
            format: 'double'
        },
        balanceAmount: {
            type: 'number',
            format: 'double'
        },
        agingCategory: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Reports_DailyReportDtoSchema = {
    type: 'object',
    properties: {
        totalInvoices: {
            type: 'integer',
            format: 'int32'
        },
        totalBilledAmount: {
            type: 'number',
            format: 'double'
        },
        totalPaidAmount: {
            type: 'number',
            format: 'double'
        },
        outstandingBalance: {
            type: 'number',
            format: 'double'
        },
        services: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Reports.ServiceSummaryDto'
            },
            nullable: true
        },
        payments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Reports.PaymentSummaryDto'
            },
            nullable: true
        },
        unbilledInvoices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Invoices.InvoiceDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Reports_PaymentSummaryDtoSchema = {
    type: 'object',
    properties: {
        paymentDate: {
            type: 'string',
            format: 'date-time'
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        paymentType: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Reports_ServiceSummaryDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        quantity: {
            type: 'number',
            format: 'double'
        },
        total: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_ServivceProviders_CreateServiceProviderDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortId: {
            type: 'string',
            nullable: true
        },
        contactNumber: {
            type: 'string',
            format: 'tel',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.ServiceProviders.ServiceProviderType'
        },
        description: {
            type: 'string',
            nullable: true
        },
        businessRegistrationNumber: {
            type: 'string',
            nullable: true
        },
        businessRegistrationType: {
            type: 'string',
            nullable: true
        },
        businessRegistrationCountry: {
            type: 'string',
            nullable: true
        },
        contractStartDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        contractEndDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isContractActive: {
            type: 'boolean'
        },
        isContractRenewable: {
            type: 'boolean'
        },
        isContractAutoRenewable: {
            type: 'boolean'
        },
        isContractTerminated: {
            type: 'boolean'
        },
        actualStartDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        activationDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        address: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Common.AddressDetailsDto'
        },
        billingInfo: {
            '$ref': '#/components/schemas/Mediflow.Entities.ServiceProviders.BillingInformation'
        },
        hrInfo: {
            '$ref': '#/components/schemas/Mediflow.Entities.ServiceProviders.HumanResourcesInformation'
        },
        adminEmail: {
            type: 'string',
            nullable: true
        },
        logoBase64: {
            type: 'string',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_ServivceProviders_CreatedServiceProviderDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        adminPassword: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_ServivceProviders_ServiceProviderDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortId: {
            type: 'string',
            nullable: true
        },
        contactNumber: {
            type: 'string',
            format: 'tel',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.ServiceProviders.ServiceProviderType'
        },
        description: {
            type: 'string',
            nullable: true
        },
        businessRegistrationNumber: {
            type: 'string',
            nullable: true
        },
        businessRegistrationType: {
            type: 'string',
            nullable: true
        },
        businessRegistrationCountry: {
            type: 'string',
            nullable: true
        },
        contractStartDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        contractEndDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isContractActive: {
            type: 'boolean'
        },
        isContractRenewable: {
            type: 'boolean'
        },
        isContractAutoRenewable: {
            type: 'boolean'
        },
        isContractTerminated: {
            type: 'boolean'
        },
        actualStartDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        activationDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        address: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Common.AddressDetailsDto'
        },
        billingInfo: {
            '$ref': '#/components/schemas/Mediflow.Entities.ServiceProviders.BillingInformation'
        },
        hrInfo: {
            '$ref': '#/components/schemas/Mediflow.Entities.ServiceProviders.HumanResourcesInformation'
        },
        adminEmail: {
            type: 'string',
            nullable: true
        },
        logoObjectId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_ServivceProviders_ServiceProviderListItemDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortId: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/Mediflow.Entities.ServiceProviders.ServiceProviderType'
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_ServivceProviders_UpdateServiceProviderDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        shortId: {
            type: 'string',
            nullable: true
        },
        contactNumber: {
            type: 'string',
            format: 'tel',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        address: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Common.AddressDetailsDto'
        },
        logoBase64: {
            type: 'string',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Staffs_CreateEditStaffDtoSchema = {
    type: 'object',
    properties: {
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date-time'
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        joinDate: {
            type: 'string',
            format: 'date-time'
        },
        userId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        currentPassword: {
            type: 'string',
            nullable: true
        },
        newPassword: {
            type: 'string',
            nullable: true
        },
        permissions: {
            '$ref': '#/components/schemas/Mediflow.DTOs.Staffs.PermissionAssignmentBatchDto'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Staffs_PermissionAssignmentBatchDtoSchema = {
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Staffs.PermissionAssignmentDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Staffs_PermissionAssignmentDtoSchema = {
    type: 'object',
    properties: {
        permission: {
            type: 'string',
            nullable: true
        },
        assigned: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Staffs_PermissionTreeNodeDtoSchema = {
    type: 'object',
    properties: {
        text: {
            type: 'string',
            nullable: true
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Staffs.PermissionTreeNodeDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Staffs_StaffDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date-time'
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        joinDate: {
            type: 'string',
            format: 'date-time'
        },
        userId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_Staffs_StaffListItemDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            type: 'string',
            nullable: true
        },
        lastName: {
            type: 'string',
            nullable: true
        },
        gender: {
            '$ref': '#/components/schemas/Mediflow.Enums.Gender'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date-time'
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        joinDate: {
            type: 'string',
            format: 'date-time'
        },
        userId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        username: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_VisitTemplates_CreateUpdateVisitTemplateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        templateConfigs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.VisitTemplates.VisitTemplateConfigDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_VisitTemplates_VisitTemplateConfigDtoSchema = {
    type: 'object',
    properties: {
        diagnosis: {
            type: 'string',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        medications: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_DTOs_VisitTemplates_VisitTemplateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        templateConfigs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.VisitTemplates.VisitTemplateConfigDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_Entities_ChargeableServices_ChargeableServiceTypeSchema = {
    enum: [1, 2, 3, 4, 5, 6, 7],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_Common_AddressDetailsSchema = {
    type: 'object',
    properties: {
        street: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        state: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_Entities_DocumentTemplates_TemplateTypeSchema = {
    enum: [1, 2, 3, 4, 5, 6, 7, 8],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_Documents_DocumentTypeSchema = {
    enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_FieldTemplates_FieldTypeSchema = {
    enum: [1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_InvoiceItems_InvoiceItemTypeSchema = {
    enum: [1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_Invoices_InvoiceStatusSchema = {
    enum: [0, 1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_Invoices_InvoiceTypeSchema = {
    enum: [1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_MedicalConsentForms_MedicalConsentFormSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            readOnly: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        data: {
            type: 'string',
            nullable: true
        },
        consentFormObjectId: {
            type: 'string',
            format: 'uuid'
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_Entities_Medicines_MedicineClassificationSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6, 7],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_PatientQueues_PatientQueueSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        queueNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        patientId: {
            type: 'string',
            format: 'uuid'
        },
        patientName: {
            type: 'string',
            nullable: true
        },
        nationalId: {
            type: 'string',
            nullable: true
        },
        arrivalTime: {
            type: 'string',
            format: 'date-time'
        },
        appointmentTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/Mediflow.Entities.PatientQueues.QueueStatus'
        },
        isPrioritised: {
            type: 'boolean'
        },
        patientSessionId: {
            type: 'string',
            format: 'uuid'
        },
        remark: {
            type: 'string',
            nullable: true
        },
        elapsedTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        completionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        queueTime: {
            type: 'string',
            format: 'date-time'
        },
        visitType: {
            type: 'string',
            nullable: true
        },
        doctorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_Entities_PatientQueues_QueueStatusSchema = {
    enum: [1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_PatientSessions_PatientSessionStatusSchema = {
    enum: [0, 1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_Patients_PatientIdentificationTypeSchema = {
    enum: [0, 1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_Payments_PaymentStatusSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_Payments_PaymentTypeSchema = {
    enum: [0, 1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Entities_ServiceProviders_BillingInformationSchema = {
    type: 'object',
    properties: {
        address: {
            '$ref': '#/components/schemas/Mediflow.Entities.Common.AddressDetails'
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        taxNumber: {
            type: 'string',
            nullable: true
        },
        taxOffice: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_Entities_ServiceProviders_HumanResourcesInformationSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        contactNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Mediflow_Entities_ServiceProviders_ServiceProviderTypeSchema = {
    enum: [0, 1, 2, 3, 4],
    type: 'integer',
    format: 'int32'
} as const;

export const Mediflow_Enums_GenderSchema = {
    enum: [0, 1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const Volo_Abp_Account_ChangePasswordInputSchema = {
    required: ['newPassword'],
    type: 'object',
    properties: {
        currentPassword: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        newPassword: {
            maxLength: 128,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_ProfileDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        isExternal: {
            type: 'boolean'
        },
        hasPassword: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_RegisterDtoSchema = {
    required: ['appName', 'emailAddress', 'password', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        emailAddress: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            format: 'password'
        },
        appName: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_ResetPasswordDtoSchema = {
    required: ['password', 'resetToken'],
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        resetToken: {
            minLength: 1,
            type: 'string'
        },
        password: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_SendPasswordResetCodeDtoSchema = {
    required: ['appName', 'email'],
    type: 'object',
    properties: {
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        appName: {
            minLength: 1,
            type: 'string'
        },
        returnUrl: {
            type: 'string',
            nullable: true
        },
        returnUrlHash: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_UpdateProfileDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_VerifyPasswordResetTokenInputSchema = {
    required: ['resetToken'],
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        resetToken: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_Web_Areas_Account_Controllers_Models_AbpLoginResultSchema = {
    type: 'object',
    properties: {
        result: {
            '$ref': '#/components/schemas/Volo.Abp.Account.Web.Areas.Account.Controllers.Models.LoginResultType'
        },
        description: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Account_Web_Areas_Account_Controllers_Models_LoginResultTypeSchema = {
    enum: [1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32'
} as const;

export const Volo_Abp_Account_Web_Areas_Account_Controllers_Models_UserLoginInfoSchema = {
    required: ['password', 'userNameOrEmailAddress'],
    type: 'object',
    properties: {
        userNameOrEmailAddress: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        password: {
            maxLength: 32,
            minLength: 0,
            type: 'string',
            format: 'password'
        },
        rememberMe: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_ListResultDto_1__Volo_Abp_Identity_IdentityRoleDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Identity.IdentityRoleDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_ListResultDto_1__Volo_Abp_Users_UserData__Volo_Abp_Users_Abstractions__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Users.UserData'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Mediflow_DTOs_ChargeableServices_ChargeableServiceDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.ChargeableServices.ChargeableServiceDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Mediflow_DTOs_InsurancePanels_InsurancePanelDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.InsurancePanels.InsurancePanelDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Mediflow_DTOs_Invoices_InvoiceDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Invoices.InvoiceDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Mediflow_DTOs_MedicalSupplies_MedicalSupplyDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.MedicalSupplies.MedicalSupplyDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Mediflow_DTOs_Medicines_MedicineDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Medicines.MedicineDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Mediflow_DTOs_Patient_PatientListItemDto__Mediflow_Application_Contracts__Version_1_0_0_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Mediflow.DTOs.Patient.PatientListItemDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Volo_Abp_Identity_IdentityRoleDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Identity.IdentityRoleDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Volo_Abp_Identity_IdentityUserDto__Volo_Abp_Identity_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Identity.IdentityUserDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Application_Dtos_PagedResultDto_1__Volo_Abp_TenantManagement_TenantDto__Volo_Abp_TenantManagement_Application_Contracts__Version_8_0_3_0__Culture_neutral__PublicKeyToken_null__Schema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.TenantManagement.TenantDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationAuthConfigurationDtoSchema = {
    type: 'object',
    properties: {
        grantedPolicies: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationConfigurationDtoSchema = {
    type: 'object',
    properties: {
        localization: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationLocalizationConfigurationDto'
        },
        auth: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationAuthConfigurationDto'
        },
        setting: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationSettingConfigurationDto'
        },
        currentUser: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.CurrentUserDto'
        },
        features: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationFeatureConfigurationDto'
        },
        globalFeatures: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationGlobalFeatureConfigurationDto'
        },
        multiTenancy: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.MultiTenancy.MultiTenancyInfoDto'
        },
        currentTenant: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.MultiTenancy.CurrentTenantDto'
        },
        timing: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.TimingDto'
        },
        clock: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ClockDto'
        },
        objectExtensions: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ObjectExtensionsDto'
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationFeatureConfigurationDtoSchema = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationGlobalFeatureConfigurationDtoSchema = {
    type: 'object',
    properties: {
        enabledFeatures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationConfigurationDtoSchema = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    type: 'string'
                }
            },
            nullable: true
        },
        resources: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationLocalizationResourceDto'
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Localization.LanguageInfo'
            },
            nullable: true
        },
        currentCulture: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.CurrentCultureDto'
        },
        defaultResourceName: {
            type: 'string',
            nullable: true
        },
        languagesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/Volo.Abp.NameValue'
                }
            },
            nullable: true
        },
        languageFilesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/Volo.Abp.NameValue'
                }
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationDtoSchema = {
    type: 'object',
    properties: {
        resources: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ApplicationLocalizationResourceDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationResourceDtoSchema = {
    type: 'object',
    properties: {
        texts: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        baseResources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationSettingConfigurationDtoSchema = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ClockDtoSchema = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentCultureDtoSchema = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        englishName: {
            type: 'string',
            nullable: true
        },
        threeLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        twoLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        isRightToLeft: {
            type: 'boolean'
        },
        cultureName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        nativeName: {
            type: 'string',
            nullable: true
        },
        dateTimeFormat: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.DateTimeFormatDto'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentUserDtoSchema = {
    type: 'object',
    properties: {
        isAuthenticated: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserName: {
            type: 'string',
            nullable: true
        },
        impersonatorTenantName: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberVerified: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_DateTimeFormatDtoSchema = {
    type: 'object',
    properties: {
        calendarAlgorithmType: {
            type: 'string',
            nullable: true
        },
        dateTimeFormatLong: {
            type: 'string',
            nullable: true
        },
        shortDatePattern: {
            type: 'string',
            nullable: true
        },
        fullDateTimePattern: {
            type: 'string',
            nullable: true
        },
        dateSeparator: {
            type: 'string',
            nullable: true
        },
        shortTimePattern: {
            type: 'string',
            nullable: true
        },
        longTimePattern: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_IanaTimeZoneSchema = {
    type: 'object',
    properties: {
        timeZoneName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_EntityExtensionDtoSchema = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyDto'
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumDtoSchema = {
    type: 'object',
    properties: {
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionEnumFieldDto'
            },
            nullable: true
        },
        localizationResource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumFieldDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiCreateDtoSchema = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiDtoSchema = {
    type: 'object',
    properties: {
        onGet: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiGetDto'
        },
        onCreate: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiCreateDto'
        },
        onUpdate: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiUpdateDto'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiGetDtoSchema = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiUpdateDtoSchema = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyAttributeDtoSchema = {
    type: 'object',
    properties: {
        typeSimple: {
            type: 'string',
            nullable: true
        },
        config: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyDtoSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        displayName: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.LocalizableStringDto'
        },
        api: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyApiDto'
        },
        ui: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiDto'
        },
        attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyAttributeDto'
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiDtoSchema = {
    type: 'object',
    properties: {
        onTable: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiTableDto'
        },
        onCreateForm: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiFormDto'
        },
        onEditForm: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiFormDto'
        },
        lookup: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionPropertyUiLookupDto'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiFormDtoSchema = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiLookupDtoSchema = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            nullable: true
        },
        resultListPropertyName: {
            type: 'string',
            nullable: true
        },
        displayPropertyName: {
            type: 'string',
            nullable: true
        },
        valuePropertyName: {
            type: 'string',
            nullable: true
        },
        filterParamName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiTableDtoSchema = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_LocalizableStringDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        resource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ModuleExtensionDtoSchema = {
    type: 'object',
    properties: {
        entities: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.EntityExtensionDto'
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ObjectExtensionsDtoSchema = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ModuleExtensionDto'
            },
            nullable: true
        },
        enums: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ObjectExtending.ExtensionEnumDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimeZoneSchema = {
    type: 'object',
    properties: {
        iana: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.IanaTimeZone'
        },
        windows: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.WindowsTimeZone'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimingDtoSchema = {
    type: 'object',
    properties: {
        timeZone: {
            '$ref': '#/components/schemas/Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.TimeZone'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_WindowsTimeZoneSchema = {
    type: 'object',
    properties: {
        timeZoneId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_MultiTenancy_CurrentTenantDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_MultiTenancy_FindTenantResultDtoSchema = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_AspNetCore_Mvc_MultiTenancy_MultiTenancyInfoDtoSchema = {
    type: 'object',
    properties: {
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_FeatureManagement_FeatureDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        },
        provider: {
            '$ref': '#/components/schemas/Volo.Abp.FeatureManagement.FeatureProviderDto'
        },
        description: {
            type: 'string',
            nullable: true
        },
        valueType: {
            '$ref': '#/components/schemas/Volo.Abp.Validation.StringValues.IStringValueType'
        },
        depth: {
            type: 'integer',
            format: 'int32'
        },
        parentName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_FeatureManagement_FeatureGroupDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        features: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.FeatureManagement.FeatureDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_FeatureManagement_FeatureProviderDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_FeatureManagement_GetFeatureListResultDtoSchema = {
    type: 'object',
    properties: {
        groups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.FeatureManagement.FeatureGroupDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_FeatureManagement_UpdateFeatureDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_FeatureManagement_UpdateFeaturesDtoSchema = {
    type: 'object',
    properties: {
        features: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.FeatureManagement.UpdateFeatureDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_ActionApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        uniqueName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        supportedVersions: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.MethodParameterApiDescriptionModel'
            },
            nullable: true
        },
        parameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.ParameterApiDescriptionModel'
            },
            nullable: true
        },
        returnValue: {
            '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.ReturnValueApiDescriptionModel'
        },
        allowAnonymous: {
            type: 'boolean',
            nullable: true
        },
        implementFrom: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_ApplicationApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.ModuleApiDescriptionModel'
            },
            nullable: true
        },
        types: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.TypeApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_ControllerApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        controllerName: {
            type: 'string',
            nullable: true
        },
        controllerGroupName: {
            type: 'string',
            nullable: true
        },
        isRemoteService: {
            type: 'boolean'
        },
        isIntegrationService: {
            type: 'boolean'
        },
        apiVersion: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        interfaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.ControllerInterfaceApiDescriptionModel'
            },
            nullable: true
        },
        actions: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.ActionApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_ControllerInterfaceApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        methods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.InterfaceMethodApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_InterfaceMethodApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.MethodParameterApiDescriptionModel'
            },
            nullable: true
        },
        returnValue: {
            '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.ReturnValueApiDescriptionModel'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_MethodParameterApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        typeAsString: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_ModuleApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        rootPath: {
            type: 'string',
            nullable: true
        },
        remoteServiceName: {
            type: 'string',
            nullable: true
        },
        controllers: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.ControllerApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_ParameterApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        nameOnMethod: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        },
        constraintTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bindingSourceId: {
            type: 'string',
            nullable: true
        },
        descriptorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_PropertyApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isRequired: {
            type: 'boolean'
        },
        minLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        maxLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        minimum: {
            type: 'string',
            nullable: true
        },
        maximum: {
            type: 'string',
            nullable: true
        },
        regex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_ReturnValueApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_Modeling_TypeApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        baseType: {
            type: 'string',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enumValues: {
            type: 'array',
            items: {},
            nullable: true
        },
        genericArguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Http.Modeling.PropertyApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_RemoteServiceErrorInfoSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        validationErrors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.Http.RemoteServiceValidationErrorInfo'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_RemoteServiceErrorResponseSchema = {
    type: 'object',
    properties: {
        error: {
            '$ref': '#/components/schemas/Volo.Abp.Http.RemoteServiceErrorInfo'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Http_RemoteServiceValidationErrorInfoSchema = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Identity_IdentityRoleCreateDtoSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Identity_IdentityRoleDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        isDefault: {
            type: 'boolean'
        },
        isStatic: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Identity_IdentityRoleUpdateDtoSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Identity_IdentityUserCreateDtoSchema = {
    required: ['email', 'password', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Identity_IdentityUserDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailConfirmed: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberConfirmed: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        accessFailedCount: {
            type: 'integer',
            format: 'int32'
        },
        lockoutEnd: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        entityVersion: {
            type: 'integer',
            format: 'int32'
        },
        lastPasswordChangeTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Identity_IdentityUserUpdateDtoSchema = {
    required: ['email', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Identity_IdentityUserUpdateRolesDtoSchema = {
    required: ['roleNames'],
    type: 'object',
    properties: {
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Localization_LanguageInfoSchema = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        twoLetterISOLanguageName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        flagIcon: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_NameValueSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_PermissionManagement_GetPermissionListResultDtoSchema = {
    type: 'object',
    properties: {
        entityDisplayName: {
            type: 'string',
            nullable: true
        },
        groups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.PermissionManagement.PermissionGroupDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_PermissionManagement_PermissionGrantInfoDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        parentName: {
            type: 'string',
            nullable: true
        },
        isGranted: {
            type: 'boolean'
        },
        allowedProviders: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        grantedProviders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.PermissionManagement.ProviderInfoDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_PermissionManagement_PermissionGroupDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        displayNameKey: {
            type: 'string',
            nullable: true
        },
        displayNameResource: {
            type: 'string',
            nullable: true
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.PermissionManagement.PermissionGrantInfoDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_PermissionManagement_ProviderInfoDtoSchema = {
    type: 'object',
    properties: {
        providerName: {
            type: 'string',
            nullable: true
        },
        providerKey: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_PermissionManagement_UpdatePermissionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        isGranted: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_PermissionManagement_UpdatePermissionsDtoSchema = {
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Volo.Abp.PermissionManagement.UpdatePermissionDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_SettingManagement_EmailSettingsDtoSchema = {
    type: 'object',
    properties: {
        smtpHost: {
            type: 'string',
            nullable: true
        },
        smtpPort: {
            type: 'integer',
            format: 'int32'
        },
        smtpUserName: {
            type: 'string',
            nullable: true
        },
        smtpPassword: {
            type: 'string',
            nullable: true
        },
        smtpDomain: {
            type: 'string',
            nullable: true
        },
        smtpEnableSsl: {
            type: 'boolean'
        },
        smtpUseDefaultCredentials: {
            type: 'boolean'
        },
        defaultFromAddress: {
            type: 'string',
            nullable: true
        },
        defaultFromDisplayName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_SettingManagement_SendTestEmailInputSchema = {
    required: ['senderEmailAddress', 'subject', 'targetEmailAddress'],
    type: 'object',
    properties: {
        senderEmailAddress: {
            minLength: 1,
            type: 'string'
        },
        targetEmailAddress: {
            minLength: 1,
            type: 'string'
        },
        subject: {
            minLength: 1,
            type: 'string'
        },
        body: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_SettingManagement_UpdateEmailSettingsDtoSchema = {
    required: ['defaultFromAddress', 'defaultFromDisplayName'],
    type: 'object',
    properties: {
        smtpHost: {
            maxLength: 256,
            type: 'string',
            nullable: true
        },
        smtpPort: {
            maximum: 65535,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        smtpUserName: {
            maxLength: 1024,
            type: 'string',
            nullable: true
        },
        smtpPassword: {
            maxLength: 1024,
            type: 'string',
            format: 'password',
            nullable: true
        },
        smtpDomain: {
            maxLength: 1024,
            type: 'string',
            nullable: true
        },
        smtpEnableSsl: {
            type: 'boolean'
        },
        smtpUseDefaultCredentials: {
            type: 'boolean'
        },
        defaultFromAddress: {
            maxLength: 1024,
            minLength: 1,
            type: 'string'
        },
        defaultFromDisplayName: {
            maxLength: 1024,
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_TenantManagement_TenantCreateDtoSchema = {
    required: ['adminEmailAddress', 'adminPassword', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string'
        },
        adminEmailAddress: {
            maxLength: 256,
            minLength: 1,
            type: 'string',
            format: 'email'
        },
        adminPassword: {
            maxLength: 128,
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_TenantManagement_TenantDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_TenantManagement_TenantUpdateDtoSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Users_UserDataSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailConfirmed: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberConfirmed: {
            type: 'boolean'
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Validation_StringValues_IStringValueTypeSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        properties: {
            type: 'object',
            additionalProperties: {
                nullable: true
            },
            nullable: true,
            readOnly: true
        },
        validator: {
            '$ref': '#/components/schemas/Volo.Abp.Validation.StringValues.IValueValidator'
        }
    },
    additionalProperties: false
} as const;

export const Volo_Abp_Validation_StringValues_IValueValidatorSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        properties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;